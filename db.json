{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":0},{"_id":"source/images/2022_11_13.jpg","path":"images/2022_11_13.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/.Linux文本操作.md.swp","hash":"c80e01c55180982db2c47cc5a9b6dd54abced34f","modified":1685864426670},{"_id":"source/_posts/.github-workflow.md.swp","hash":"8a80775e6822167f4f1ee3f2e4b6c0102a0016f1","modified":1685884691246},{"_id":"source/_posts/.github-问题收集.md.swp","hash":"d9c0b259af4cec673421436bf5c85069519e8655","modified":1685889908827},{"_id":"source/_posts/.hexo备份迁移.md.swp","hash":"efaea152cb9e15e16f6fc441c479cb48fdf20178","modified":1685870264244},{"_id":"source/_posts/AutoBuild.md","hash":"1fb406aafed1e774d6e97cbe1323f2debfbd3c56","modified":1685864426670},{"_id":"source/_posts/Cplusplus关键字.md","hash":"0d026e29b9f677c8f54ef0bd7cb5bd866ef1a73e","modified":1685864426670},{"_id":"source/_posts/Linux文本操作.md","hash":"9989584a3adb4b356105cd1fba57de61d1151df8","modified":1685864426670},{"_id":"source/_posts/Neovim-安装与配置.md","hash":"db375e214f9bddd60cee021145addcb6c39f2f01","modified":1685885171427},{"_id":"source/_posts/git-pre-commit.md","hash":"85c099dc3f1716b42278982c7d4ba53ed84e00e6","modified":1685884082301},{"_id":"source/_posts/github-workflow.md","hash":"85caa76fb504c504df847689ef21cec81e91503b","modified":1685884691242},{"_id":"source/_posts/github-问题收集.md","hash":"f77d80d2f24c60145e40d5fd30b911b5958910a0","modified":1685889908827},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1685864426670},{"_id":"source/_posts/hexo备份迁移.md","hash":"a8166227eb0d0f2d67c911906e04acaacffb80c9","modified":1685870264244},{"_id":"source/_posts/interview.md","hash":"338aaa799ff6a29a3c7b10095b089040bb615bb1","modified":1685864426670},{"_id":"source/_posts/linux安装Anaconda以及基本用法.md","hash":"80fe67c24fa140638283fdba1e62b0cb18f00a38","modified":1685886845033},{"_id":"source/_posts/zsh.md","hash":"521e616fb313fcb4de41ae21b9403864beb14487","modified":1685863538914},{"_id":"source/images/1.jpg","hash":"cd40cd5048197ffef35598b5e334e3cd76ebee06","modified":1685864426670},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1685808802915},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1685808802679},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1685808802923},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1685808802923},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1685808802931},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1685808802931},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1685808802935},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1685808802935},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1685808802939},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1685808802943},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1685808802947},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1685808802943},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1685808802947},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1685808802947},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1685808802951},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1685808802951},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1685808802955},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1685808802255},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1685808802291},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1685808802339},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1685808802347},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1685808802359},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1685808802363},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1685808802627},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1685808802383},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1685808802139},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1685808802175},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1685808802263},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1685808802303},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1685808802319},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1685808802323},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1685808802327},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1685808802335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1685808802347},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1685808802371},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1685808802287},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1685808802163},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1685808802367},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1685808802375},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1685808802235},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1685808802387},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1685808802923},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1685808801979},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1685808802679},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1685808801539},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1685808802287},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1685808802299},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1685808802311},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1685808802355},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1685808802375},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1685808802387},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1685808802671},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1685808802731},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1685808802735},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1685808802735},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1685808802759},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1685808802775},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1685808802739},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1685808802783},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1685808802787},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1685808802767},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1685808802755},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1685808802791},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1685808802771},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1685808802667},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1685808802659},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1685808802795},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1685808802711},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1685808802903},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1685808802715},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1685808802911},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1685808802507},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1685808802699},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1685808802887},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1685808802615},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1685808802871},{"_id":"source/images/2022_11_13.jpg","hash":"455f8f0e01ab359650400f1ac3ce0562e80c05cf","modified":1685864426710},{"_id":"public/baidusitemap.xml","hash":"1ad58a9a0ed729810da9ba7512af859fbd907d93","modified":1687100826717},{"_id":"public/sitemap.xml","hash":"d46bda6ef38a4afd7b2b419198df2f9864f7df50","modified":1687100826717},{"_id":"public/search.xml","hash":"dbf66f25653ad911efeb9fa18aa12be36a71264d","modified":1687101212919},{"_id":"public/2023/06/04/github-问题收集/index.html","hash":"6a2ff5bad497066cfd7e7796a78696b03a1261c3","modified":1687100826717},{"_id":"public/2023/06/04/github-workflow/index.html","hash":"c01ee402a368881312b8b0a3bfcf48a6ce2eb484","modified":1687100826717},{"_id":"public/2023/06/04/hexo备份迁移/index.html","hash":"7b2b39e6f085b127c20da8f5961d4dd27c5bb89f","modified":1687100826717},{"_id":"public/2023/06/04/hello-world/index.html","hash":"b75015ed69c8d492c2a53b50bdb4350c75f89ec1","modified":1687100826717},{"_id":"public/2023/06/04/zsh/index.html","hash":"dbf1707a5d3a7b51c8a39360a06da4bc9690838f","modified":1687100826717},{"_id":"public/2023/05/30/AutoBuild/index.html","hash":"29fb1b579fde3237eba68413b5be6d467d33c05f","modified":1687100826717},{"_id":"public/2022/11/16/Linux文本操作/index.html","hash":"65ac493244218397cdc3dc92b0fec900da7186d9","modified":1687100826717},{"_id":"public/2022/11/15/Cplusplus关键字/index.html","hash":"b1a6bbb813ad454d38da2af9afae4dd43a9e8da4","modified":1687100826717},{"_id":"public/2022/11/09/interview/index.html","hash":"a984c0fad491ebb8158e8c7458f47d9a70020e69","modified":1687100826717},{"_id":"public/archives/index.html","hash":"e5a534e7b8654126e7fd276e00b22f154472501e","modified":1687100826717},{"_id":"public/archives/page/2/index.html","hash":"c80e53a14cbba39aad83ece99662417863036800","modified":1687100826717},{"_id":"public/archives/2022/index.html","hash":"c474d6a87c8a5e15b46d001e77440548a4d44f54","modified":1687100826717},{"_id":"public/archives/2022/11/index.html","hash":"e63b2764aacf7132a6badcc76e0a1f72586250a2","modified":1687100826717},{"_id":"public/archives/2023/index.html","hash":"6d4cbad7cbc0d6a3b5ef13150fea2d9db0350a91","modified":1687100826717},{"_id":"public/archives/2023/05/index.html","hash":"afdec9292c6ebd01149170499e4b5c76570f5295","modified":1687100826717},{"_id":"public/archives/2023/06/index.html","hash":"0d629a5c5f79905ea58f861267d6493591aa24d3","modified":1687100826717},{"_id":"public/page/2/index.html","hash":"ab2e23ee082d90f762785046ce5ccb714c4c4114","modified":1687100826717},{"_id":"public/tags/shell/index.html","hash":"874b9f5f1b2efa526ec32da44e3c8f8ba253cfc1","modified":1687100826717},{"_id":"public/tags/interview/index.html","hash":"4d88c67db27d641523c74c31673b3293fdd99fd1","modified":1687100826717},{"_id":"public/tags/c-c/index.html","hash":"8c6c533e9cadd592b142861cbbef146dbb49c9a1","modified":1687100826717},{"_id":"public/tags/git/index.html","hash":"950ce880fafd2168de3d2bdee024e6a8b64a7d7a","modified":1687100826717},{"_id":"public/tags/Neovim/index.html","hash":"9814833906c2985041fa1d71b2c1e3149fbceff8","modified":1687100826717},{"_id":"public/tags/vim/index.html","hash":"cb3be105e31d5d2b172fe7ad61a391165e35d07a","modified":1687100826717},{"_id":"public/tags/github/index.html","hash":"a6f69fe9feb030bfc51953507963591038bdb440","modified":1687100826717},{"_id":"public/tags/linux/index.html","hash":"105f4e12544ce12a57b56cd4296873c69f5c1d03","modified":1687100826717},{"_id":"public/tags/hexo/index.html","hash":"1037ab39ec6a609dc17410b684d3477b83e3712e","modified":1687100826717},{"_id":"public/tags/LLVM/index.html","hash":"d7b31db05ce0b360c717c25926809399a9fdd078","modified":1687100826717},{"_id":"public/tags/Anaconda/index.html","hash":"cbda8852a513003b69e210830b341bb34a6ef7b6","modified":1687100826717},{"_id":"public/2023/06/04/linux安装Anaconda以及基本用法/index.html","hash":"040a81e65019e11eb240f6988f52ef176aeae9a8","modified":1687100826717},{"_id":"public/2023/06/04/Neovim-安装与配置/index.html","hash":"ee524da370d60d98f791ed3eab9e2f3d81cdfb2e","modified":1687100826717},{"_id":"public/2023/06/04/git-pre-commit/index.html","hash":"01ce2b0d2c2b6222a8e700d001fef42fd3c0b75e","modified":1687100826717},{"_id":"public/index.html","hash":"ac2f305eda50518972ebd7b82307f797dbdc978b","modified":1687101212919},{"_id":"public/tags/python/index.html","hash":"d01aca1f65eab81611a089cab45effc6c1474f18","modified":1687100826717},{"_id":"public/images/1.jpg","hash":"cd40cd5048197ffef35598b5e334e3cd76ebee06","modified":1685889947446},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1685889947446},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1685889947446},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1685889947446},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1685889947446},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1685889947446},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1685889947446},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1685889947446},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1685889947446},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1685889947446},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1685889947446},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1685889947446},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1685889947446},{"_id":"public/images/2022_11_13.jpg","hash":"455f8f0e01ab359650400f1ac3ce0562e80c05cf","modified":1685889947446},{"_id":"source/_posts/git-clang-format.md","hash":"afa7516d9f7c688407750a1287e361ce18eed512","modified":1687101209344},{"_id":"public/2023/06/18/git-clang-format/index.html","hash":"a7f245f6657b3e92ae460d25b3548423e200ed61","modified":1687101212919},{"_id":"public/tags/clang-format/index.html","hash":"4fb5351069b084e1abe0edca9ff139bdd1d8fc4e","modified":1687100826717}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"AutoBuild","date":"2023-05-30T12:28:35.000Z","_content":"","source":"_posts/AutoBuild.md","raw":"---\ntitle: AutoBuild\ndate: 2023-05-30 20:28:35\ntags:\n---\n","slug":"AutoBuild","published":1,"updated":"2023-06-04T07:40:26.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchgt0000vkehb5wagoi1","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2022-11-16T14:09:50.000Z","title":"linux文本操作","_content":"\n1. 把src.txt 的文本追加到dst.txt 后面\n\n   ```shell\n   cat src.txt >> dst.txt\n   ```\n2. linux 单线程所能支持的最大文件处理数量\n\n   ```shell\n   cat /proc/sys/fs/file-max\n   ```\n\n   设置:例如设置成8192\n\n   ```shell\n   echo 8192 > /proc/sys/fs/file-max\n   ```\n","source":"_posts/Linux文本操作.md","raw":"---\ndate: 2022-11-16 22:09:50  \ntitle: linux文本操作 \ntags:\n- shell\n---\n\n1. 把src.txt 的文本追加到dst.txt 后面\n\n   ```shell\n   cat src.txt >> dst.txt\n   ```\n2. linux 单线程所能支持的最大文件处理数量\n\n   ```shell\n   cat /proc/sys/fs/file-max\n   ```\n\n   设置:例如设置成8192\n\n   ```shell\n   echo 8192 > /proc/sys/fs/file-max\n   ```\n","slug":"Linux文本操作","published":1,"updated":"2023-06-04T07:40:26.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchgz0001vkeh227j55od","content":"<ol>\n<li><p>把src.txt 的文本追加到dst.txt 后面</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat src.txt &gt;&gt; dst.txt</span><br></pre></td></tr></tbody></table></figure></li>\n<li><p>linux 单线程所能支持的最大文件处理数量</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/sys/fs/file-max</span><br></pre></td></tr></tbody></table></figure>\n\n<p>设置:例如设置成8192</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 8192 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></tbody></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>把src.txt 的文本追加到dst.txt 后面</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat src.txt &gt;&gt; dst.txt</span><br></pre></td></tr></table></figure></li>\n<li><p>linux 单线程所能支持的最大文件处理数量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure>\n\n<p>设置:例如设置成8192</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 8192 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"date":"2022-11-15T15:09:50.000Z","title":"C++关键字总结","_content":"\n### mutable 与 const \nmutable的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。\n\n1、const所修饰的函数中，要有编译器负责保护类中的成员函数不被修改；而相对地，mutable则是用来修饰类的成员变量的，让该变量在const修饰的常成员函数中可以被修改\n\n2、const修饰的函数只能是类的成员函数(保护this指针不被恶意修改)；mutable修饰的变量只能是类的成员变量。\n\n3、在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const修饰的常成员函数中。\n\n### private\n private可以保护不被类的成员不被外界调用，析构函数通常情况是public的，这样外部调用的时候可以用于\n 释放内存，如果一个析构函数被private修饰，那么会出现编译报错，因为编译器不能调用被private保护的析构函数。  \n\n\n### 引用\n[1] https://blog.csdn.net/weixin_42067873/article/details/96107750","source":"_posts/Cplusplus关键字.md","raw":"---\ndate: 2022-11-15 23:09:50  \ntitle: C++关键字总结  \ntags:  \n- interview\n- c/c++\n---\n\n### mutable 与 const \nmutable的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。\n\n1、const所修饰的函数中，要有编译器负责保护类中的成员函数不被修改；而相对地，mutable则是用来修饰类的成员变量的，让该变量在const修饰的常成员函数中可以被修改\n\n2、const修饰的函数只能是类的成员函数(保护this指针不被恶意修改)；mutable修饰的变量只能是类的成员变量。\n\n3、在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const修饰的常成员函数中。\n\n### private\n private可以保护不被类的成员不被外界调用，析构函数通常情况是public的，这样外部调用的时候可以用于\n 释放内存，如果一个析构函数被private修饰，那么会出现编译报错，因为编译器不能调用被private保护的析构函数。  \n\n\n### 引用\n[1] https://blog.csdn.net/weixin_42067873/article/details/96107750","slug":"Cplusplus关键字","published":1,"updated":"2023-06-04T07:40:26.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchh20002vkeh49du3m1j","content":"<h3 id=\"mutable-与-const\"><a href=\"#mutable-与-const\" class=\"headerlink\" title=\"mutable 与 const\"></a>mutable 与 const</h3><p>mutable的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。</p>\n<p>1、const所修饰的函数中，要有编译器负责保护类中的成员函数不被修改；而相对地，mutable则是用来修饰类的成员变量的，让该变量在const修饰的常成员函数中可以被修改</p>\n<p>2、const修饰的函数只能是类的成员函数(保护this指针不被恶意修改)；mutable修饰的变量只能是类的成员变量。</p>\n<p>3、在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const修饰的常成员函数中。</p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p> private可以保护不被类的成员不被外界调用，析构函数通常情况是public的，这样外部调用的时候可以用于<br> 释放内存，如果一个析构函数被private修饰，那么会出现编译报错，因为编译器不能调用被private保护的析构函数。  </p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>[1] <a href=\"https://blog.csdn.net/weixin_42067873/article/details/96107750\">https://blog.csdn.net/weixin_42067873/article/details/96107750</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"mutable-与-const\"><a href=\"#mutable-与-const\" class=\"headerlink\" title=\"mutable 与 const\"></a>mutable 与 const</h3><p>mutable的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。</p>\n<p>1、const所修饰的函数中，要有编译器负责保护类中的成员函数不被修改；而相对地，mutable则是用来修饰类的成员变量的，让该变量在const修饰的常成员函数中可以被修改</p>\n<p>2、const修饰的函数只能是类的成员函数(保护this指针不被恶意修改)；mutable修饰的变量只能是类的成员变量。</p>\n<p>3、在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const修饰的常成员函数中。</p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3><p> private可以保护不被类的成员不被外界调用，析构函数通常情况是public的，这样外部调用的时候可以用于<br> 释放内存，如果一个析构函数被private修饰，那么会出现编译报错，因为编译器不能调用被private保护的析构函数。  </p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>[1] <a href=\"https://blog.csdn.net/weixin_42067873/article/details/96107750\">https://blog.csdn.net/weixin_42067873/article/details/96107750</a></p>\n"},{"title":"git pre-commit","date":"2023-06-04T12:48:10.000Z","_content":"\n要在Git中设置pre-commit钩子并使用clang-format进行代码格式化和设置代码风格，您可以按照以下步骤进行操作：\n\n1. 安装clang-format：确保您的系统上已安装clang-format。您可以根据您的操作系统选择适当的方法进行安装。\n\n2. 导航到您的Git项目的根目录。\n\n3. 进入`.git/hooks/`目录：\n\n   ```\n   cd .git/hooks/\n   ```\n\n4. 检查是否已存在`pre-commit`文件。如果存在，可以备份或删除该文件。\n\n   ```\n   ls pre-commit\n   ```\n\n   如果输出显示`pre-commit`文件，则可以备份或删除它。\n\n5. 创建一个新的`pre-commit`文件并编辑：\n\n   ```\n   touch pre-commit\n   chmod +x pre-commit\n   vim pre-commit\n   ```\n\n   这将创建一个名为`pre-commit`的空文件，并赋予它执行权限。使用适合您的文本编辑器打开文件。\n\n6. 在`pre-commit`文件中，添加以下脚本逻辑：\n\n   ```bash\n   #!/bin/bash\n\n   # 定义clang-format的配置文件路径\n   CONFIG_FILE=\".clang-format\"\n\n\n   # 获取即将提交的C/C++源文件列表\n   files=$(git diff --cached --name-only --diff-filter=ACM \"*.c\" \"*.cpp\" \"*.h\" \"*.hpp\")\n   \n   # 运行代码规范检查命令，例如使用clang-format进行检查\n   # 检查命令将输出不符合规范的文件列表\n   CHECK_RESULT=$(clang-format -style=llvm --dry-run --Werror $(git diff --cached --name-only))\n\n   # 检查是否存在不符合规范的文件\n   if [ -n \"$CHECK_RESULT\" ]; then\n        echo \"Code style violation:\"\n        echo \"$CHECK_RESULT\"\n        exit 1\n   fi\n\n   # 检查是否存在要格式化的文件\n   if [ -n \"$files\" ]; then\n       echo \"Running clang-format...\"\n\n       # 逐个格式化文件\n       for file in $files\n       do\n           # 使用clang-format进行代码格式化，并覆盖原始文件\n           clang-format -style=file -i \"$file\"\n           git add \"$file\"\n       done\n   fi\n\n   exit 0\n   ```\n\n   在示例中，我们使用了`git diff`命令来获取即将提交的C/C++源文件（扩展名为.c、.cpp、.h和.hpp）。然后，我们使用`clang-format`对这些文件进行格式化，并使用`git add`将格式化后的文件添加到暂存区。\n\n   请注意，我们使用了`.clang-format`作为clang-format的配置文件。您可以根据需要在项目中创建并配置该文件，以定义您所需的代码风格。\n    如果我们要使用llvm的风格，可以使用**-style=llvm**。\n\n7. 保存并关闭文件。\n\n现在，当您执行`git commit`命令提交代码时，Git将自动运行`.git/hooks/pre-commit`脚本，并使用clang-format对即将提交的C/C++源文件进行代码格式化，并根据`.clang-format`配置文件设置代码风格。\n\n请确保脚本中的命令与您的开发环境和项目要求相匹配，并根据需要进行自定义。\n\n注意：如果您的项目中包含其他类型的源文件，如C源文件(.c)或C++源文件(.cxx)，请根据需要修改文件类型的匹配模式，并相应地更新`git diff`命令中的参数。同样，根据需要进行适当的配置文件调整。\n\n\n<font color = red> writed by chatgpt </font> \n","source":"_posts/git-pre-commit.md","raw":"---\ntitle: git pre-commit\ndate: 2023-06-04 20:48:10\ntags:\n    - git\n---\n\n要在Git中设置pre-commit钩子并使用clang-format进行代码格式化和设置代码风格，您可以按照以下步骤进行操作：\n\n1. 安装clang-format：确保您的系统上已安装clang-format。您可以根据您的操作系统选择适当的方法进行安装。\n\n2. 导航到您的Git项目的根目录。\n\n3. 进入`.git/hooks/`目录：\n\n   ```\n   cd .git/hooks/\n   ```\n\n4. 检查是否已存在`pre-commit`文件。如果存在，可以备份或删除该文件。\n\n   ```\n   ls pre-commit\n   ```\n\n   如果输出显示`pre-commit`文件，则可以备份或删除它。\n\n5. 创建一个新的`pre-commit`文件并编辑：\n\n   ```\n   touch pre-commit\n   chmod +x pre-commit\n   vim pre-commit\n   ```\n\n   这将创建一个名为`pre-commit`的空文件，并赋予它执行权限。使用适合您的文本编辑器打开文件。\n\n6. 在`pre-commit`文件中，添加以下脚本逻辑：\n\n   ```bash\n   #!/bin/bash\n\n   # 定义clang-format的配置文件路径\n   CONFIG_FILE=\".clang-format\"\n\n\n   # 获取即将提交的C/C++源文件列表\n   files=$(git diff --cached --name-only --diff-filter=ACM \"*.c\" \"*.cpp\" \"*.h\" \"*.hpp\")\n   \n   # 运行代码规范检查命令，例如使用clang-format进行检查\n   # 检查命令将输出不符合规范的文件列表\n   CHECK_RESULT=$(clang-format -style=llvm --dry-run --Werror $(git diff --cached --name-only))\n\n   # 检查是否存在不符合规范的文件\n   if [ -n \"$CHECK_RESULT\" ]; then\n        echo \"Code style violation:\"\n        echo \"$CHECK_RESULT\"\n        exit 1\n   fi\n\n   # 检查是否存在要格式化的文件\n   if [ -n \"$files\" ]; then\n       echo \"Running clang-format...\"\n\n       # 逐个格式化文件\n       for file in $files\n       do\n           # 使用clang-format进行代码格式化，并覆盖原始文件\n           clang-format -style=file -i \"$file\"\n           git add \"$file\"\n       done\n   fi\n\n   exit 0\n   ```\n\n   在示例中，我们使用了`git diff`命令来获取即将提交的C/C++源文件（扩展名为.c、.cpp、.h和.hpp）。然后，我们使用`clang-format`对这些文件进行格式化，并使用`git add`将格式化后的文件添加到暂存区。\n\n   请注意，我们使用了`.clang-format`作为clang-format的配置文件。您可以根据需要在项目中创建并配置该文件，以定义您所需的代码风格。\n    如果我们要使用llvm的风格，可以使用**-style=llvm**。\n\n7. 保存并关闭文件。\n\n现在，当您执行`git commit`命令提交代码时，Git将自动运行`.git/hooks/pre-commit`脚本，并使用clang-format对即将提交的C/C++源文件进行代码格式化，并根据`.clang-format`配置文件设置代码风格。\n\n请确保脚本中的命令与您的开发环境和项目要求相匹配，并根据需要进行自定义。\n\n注意：如果您的项目中包含其他类型的源文件，如C源文件(.c)或C++源文件(.cxx)，请根据需要修改文件类型的匹配模式，并相应地更新`git diff`命令中的参数。同样，根据需要进行适当的配置文件调整。\n\n\n<font color = red> writed by chatgpt </font> \n","slug":"git-pre-commit","published":1,"updated":"2023-06-04T13:08:02.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchh50004vkeh2d8u73bd","content":"<p>要在Git中设置pre-commit钩子并使用clang-format进行代码格式化和设置代码风格，您可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>安装clang-format：确保您的系统上已安装clang-format。您可以根据您的操作系统选择适当的方法进行安装。</p>\n</li>\n<li><p>导航到您的Git项目的根目录。</p>\n</li>\n<li><p>进入<code>.git/hooks/</code>目录：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .git/hooks/</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>检查是否已存在<code>pre-commit</code>文件。如果存在，可以备份或删除该文件。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls pre-commit</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果输出显示<code>pre-commit</code>文件，则可以备份或删除它。</p>\n</li>\n<li><p>创建一个新的<code>pre-commit</code>文件并编辑：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch pre-commit</span><br><span class=\"line\">chmod +x pre-commit</span><br><span class=\"line\">vim pre-commit</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这将创建一个名为<code>pre-commit</code>的空文件，并赋予它执行权限。使用适合您的文本编辑器打开文件。</p>\n</li>\n<li><p>在<code>pre-commit</code>文件中，添加以下脚本逻辑：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义clang-format的配置文件路径</span></span><br><span class=\"line\">CONFIG_FILE=<span class=\"string\">\".clang-format\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取即将提交的C/C++源文件列表</span></span><br><span class=\"line\">files=$(git diff --cached --name-only --diff-filter=ACM <span class=\"string\">\"*.c\"</span> <span class=\"string\">\"*.cpp\"</span> <span class=\"string\">\"*.h\"</span> <span class=\"string\">\"*.hpp\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行代码规范检查命令，例如使用clang-format进行检查</span></span><br><span class=\"line\"><span class=\"comment\"># 检查命令将输出不符合规范的文件列表</span></span><br><span class=\"line\">CHECK_RESULT=$(clang-format -style=llvm --dry-run --Werror $(git diff --cached --name-only))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否存在不符合规范的文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$CHECK_RESULT</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">\"Code style violation:\"</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$CHECK_RESULT</span>\"</span></span><br><span class=\"line\">     <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否存在要格式化的文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$files</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Running clang-format...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 逐个格式化文件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$files</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用clang-format进行代码格式化，并覆盖原始文件</span></span><br><span class=\"line\">        clang-format -style=file -i <span class=\"string\">\"<span class=\"variable\">$file</span>\"</span></span><br><span class=\"line\">        git add <span class=\"string\">\"<span class=\"variable\">$file</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在示例中，我们使用了<code>git diff</code>命令来获取即将提交的C/C++源文件（扩展名为.c、.cpp、.h和.hpp）。然后，我们使用<code>clang-format</code>对这些文件进行格式化，并使用<code>git add</code>将格式化后的文件添加到暂存区。</p>\n<p>请注意，我们使用了<code>.clang-format</code>作为clang-format的配置文件。您可以根据需要在项目中创建并配置该文件，以定义您所需的代码风格。<br> 如果我们要使用llvm的风格，可以使用**-style=llvm**。</p>\n</li>\n<li><p>保存并关闭文件。</p>\n</li>\n</ol>\n<p>现在，当您执行<code>git commit</code>命令提交代码时，Git将自动运行<code>.git/hooks/pre-commit</code>脚本，并使用clang-format对即将提交的C/C++源文件进行代码格式化，并根据<code>.clang-format</code>配置文件设置代码风格。</p>\n<p>请确保脚本中的命令与您的开发环境和项目要求相匹配，并根据需要进行自定义。</p>\n<p>注意：如果您的项目中包含其他类型的源文件，如C源文件(.c)或C++源文件(.cxx)，请根据需要修改文件类型的匹配模式，并相应地更新<code>git diff</code>命令中的参数。同样，根据需要进行适当的配置文件调整。</p>\n<p><font color=\"red\"> writed by chatgpt </font> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>要在Git中设置pre-commit钩子并使用clang-format进行代码格式化和设置代码风格，您可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>安装clang-format：确保您的系统上已安装clang-format。您可以根据您的操作系统选择适当的方法进行安装。</p>\n</li>\n<li><p>导航到您的Git项目的根目录。</p>\n</li>\n<li><p>进入<code>.git/hooks/</code>目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .git/hooks/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否已存在<code>pre-commit</code>文件。如果存在，可以备份或删除该文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls pre-commit</span><br></pre></td></tr></table></figure>\n\n<p>如果输出显示<code>pre-commit</code>文件，则可以备份或删除它。</p>\n</li>\n<li><p>创建一个新的<code>pre-commit</code>文件并编辑：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch pre-commit</span><br><span class=\"line\">chmod +x pre-commit</span><br><span class=\"line\">vim pre-commit</span><br></pre></td></tr></table></figure>\n\n<p>这将创建一个名为<code>pre-commit</code>的空文件，并赋予它执行权限。使用适合您的文本编辑器打开文件。</p>\n</li>\n<li><p>在<code>pre-commit</code>文件中，添加以下脚本逻辑：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义clang-format的配置文件路径</span></span><br><span class=\"line\">CONFIG_FILE=<span class=\"string\">&quot;.clang-format&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取即将提交的C/C++源文件列表</span></span><br><span class=\"line\">files=$(git diff --cached --name-only --diff-filter=ACM <span class=\"string\">&quot;*.c&quot;</span> <span class=\"string\">&quot;*.cpp&quot;</span> <span class=\"string\">&quot;*.h&quot;</span> <span class=\"string\">&quot;*.hpp&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行代码规范检查命令，例如使用clang-format进行检查</span></span><br><span class=\"line\"><span class=\"comment\"># 检查命令将输出不符合规范的文件列表</span></span><br><span class=\"line\">CHECK_RESULT=$(clang-format -style=llvm --dry-run --Werror $(git diff --cached --name-only))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否存在不符合规范的文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$CHECK_RESULT</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Code style violation:&quot;</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$CHECK_RESULT</span>&quot;</span></span><br><span class=\"line\">     <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否存在要格式化的文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$files</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Running clang-format...&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 逐个格式化文件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$files</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用clang-format进行代码格式化，并覆盖原始文件</span></span><br><span class=\"line\">        clang-format -style=file -i <span class=\"string\">&quot;<span class=\"variable\">$file</span>&quot;</span></span><br><span class=\"line\">        git add <span class=\"string\">&quot;<span class=\"variable\">$file</span>&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n\n<p>在示例中，我们使用了<code>git diff</code>命令来获取即将提交的C&#x2F;C++源文件（扩展名为.c、.cpp、.h和.hpp）。然后，我们使用<code>clang-format</code>对这些文件进行格式化，并使用<code>git add</code>将格式化后的文件添加到暂存区。</p>\n<p>请注意，我们使用了<code>.clang-format</code>作为clang-format的配置文件。您可以根据需要在项目中创建并配置该文件，以定义您所需的代码风格。<br> 如果我们要使用llvm的风格，可以使用**-style&#x3D;llvm**。</p>\n</li>\n<li><p>保存并关闭文件。</p>\n</li>\n</ol>\n<p>现在，当您执行<code>git commit</code>命令提交代码时，Git将自动运行<code>.git/hooks/pre-commit</code>脚本，并使用clang-format对即将提交的C&#x2F;C++源文件进行代码格式化，并根据<code>.clang-format</code>配置文件设置代码风格。</p>\n<p>请确保脚本中的命令与您的开发环境和项目要求相匹配，并根据需要进行自定义。</p>\n<p>注意：如果您的项目中包含其他类型的源文件，如C源文件(.c)或C++源文件(.cxx)，请根据需要修改文件类型的匹配模式，并相应地更新<code>git diff</code>命令中的参数。同样，根据需要进行适当的配置文件调整。</p>\n<p><font color = red> writed by chatgpt </font> </p>\n"},{"title":"Neovim: 安装与配置","date":"2023-06-04T13:24:23.000Z","_content":"安装和配置Neovim（nvim）包括两个主要步骤：安装Neovim本身和进行基本配置。以下是安装和配置Neovim的一般步骤：\n\n1. 安装Neovim：\n   - 在Linux上，您可以使用包管理器（如apt、dnf、pacman等）进行安装。例如，在Ubuntu上，可以运行以下命令：\n     ```\n     sudo apt-get install neovim\n     ```\n   - 在macOS上，您可以使用Homebrew进行安装。运行以下命令：\n     ```\n     brew install neovim\n     ```\n   - 在Windows上，您可以从Neovim的官方网站（https://neovim.io/）下载预编译的安装程序并进行安装。\n\n2. 基本配置：\n   - 打开终端或命令提示符，并运行以下命令创建配置文件：\n     ```\n     mkdir -p ~/.config/nvim\n     touch ~/.config/nvim/init.vim\n     ```\n   - 使用您喜欢的文本编辑器（如Vim、Neovim自带的nvim）打开`~/.config/nvim/init.vim`文件，并添加您的配置设置。以下是一个基本配置示例：\n     ```vim\n     \" 启用行号显示\n     set number\n\n     \" 启用语法高亮\n     syntax enable\n\n     \" 设置tab宽度为4个空格\n     set tabstop=4\n     set shiftwidth=4\n     set expandtab\n     ```\n   - 保存并关闭文件。\n\n3. 启动Neovim：\n   - 在终端或命令提示符中运行以下命令启动Neovim：\n     ```\n     nvim\n     ```\n   - Neovim将读取配置文件，并根据您的设置进行初始化。\n\n4. 进一步配置：\n   - 您可以根据个人需求进一步定制和配置Neovim。例如，您可以选择安装插件管理器（如vim-plug、dein.vim）来管理插件，配置自动补全、主题、快捷键映射等。\n\n请记住，Neovim具有丰富的配置选项和功能，您可以根据自己的需求进行定制和扩展。官方文档（https://neovim.io/doc/user/）是了解更多Neovim功能和配置的绝佳资源。\n\n\n下面是一个简单的示例，展示了Neovim的基本配置：\n\n```vim\n\" 设置行号显示\nset number\n\n\" 启用语法高亮\nsyntax enable\n\n\" 设置配色方案\ncolorscheme gruvbox\n\n\" 设置自动缩进\nset autoindent\n\n\" 启用文件类型检测\nfiletype plugin indent on\n\n\" 设置tab宽度为4个空格\nset tabstop=4\nset shiftwidth=4\nset expandtab\n\n\" 启用鼠标支持\nset mouse=a\n\n\" 设置搜索时忽略大小写\nset ignorecase\n\n\" 启用增量搜索\nset incsearch\n\n\" 设置快捷键映射\nnnoremap <leader>w :w<CR>\nnnoremap <leader>q :q<CR>\n\n\" 自动关闭括号匹配\nautocmd FileType ruby,python,perl,php,javascript,vim,jinja,html,xml,yaml,yml autocmd BufEnter * silent! %s/\\s\\+$//e | syntax sync fromstart\n\n\" 启用插件管理器\n\" 以下是使用vim-plug插件管理器的示例配置\ncall plug#begin('~/.vim/plugged')\n\n\" 插件列表\n\" 插件1: NERDTree 文件资源管理器\nPlug 'preservim/nerdtree'\n\n\" 插件2: coc.nvim 自动补全和语言服务器支持\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\n\n\" 插件3: vim-commentary 注释插件\nPlug 'tpope/vim-commentary'\n\n\" 结束插件列表\ncall plug#end()\n```\n\n以上示例展示了一些常用的配置选项和插件，包括行号显示、语法高亮、配色方案、自动缩进、文件类型检测、快捷键映射等。同时，示例中使用了vim-plug插件管理器来管理插件的安装和加载。\n\n请注意，这只是一个基本的示例配置，您可以根据自己的需求进行修改和扩展。同时，根据您使用的插件管理器和具体插件的要求，可能需要进行额外的设置和依赖项安装。\n\n您可以将以上配置保存为`~/.config/nvim/init.vim`文件（如果该文件夹和文件不存在，则需要手动创建），Neovim将在启动时加载该配置文件，并应用相应的设置和插件。\n\n","source":"_posts/Neovim-安装与配置.md","raw":"---\ntitle: 'Neovim: 安装与配置'\ndate: 2023-06-04 21:24:23\ntags:\n    - Neovim\n    - vim\n---\n安装和配置Neovim（nvim）包括两个主要步骤：安装Neovim本身和进行基本配置。以下是安装和配置Neovim的一般步骤：\n\n1. 安装Neovim：\n   - 在Linux上，您可以使用包管理器（如apt、dnf、pacman等）进行安装。例如，在Ubuntu上，可以运行以下命令：\n     ```\n     sudo apt-get install neovim\n     ```\n   - 在macOS上，您可以使用Homebrew进行安装。运行以下命令：\n     ```\n     brew install neovim\n     ```\n   - 在Windows上，您可以从Neovim的官方网站（https://neovim.io/）下载预编译的安装程序并进行安装。\n\n2. 基本配置：\n   - 打开终端或命令提示符，并运行以下命令创建配置文件：\n     ```\n     mkdir -p ~/.config/nvim\n     touch ~/.config/nvim/init.vim\n     ```\n   - 使用您喜欢的文本编辑器（如Vim、Neovim自带的nvim）打开`~/.config/nvim/init.vim`文件，并添加您的配置设置。以下是一个基本配置示例：\n     ```vim\n     \" 启用行号显示\n     set number\n\n     \" 启用语法高亮\n     syntax enable\n\n     \" 设置tab宽度为4个空格\n     set tabstop=4\n     set shiftwidth=4\n     set expandtab\n     ```\n   - 保存并关闭文件。\n\n3. 启动Neovim：\n   - 在终端或命令提示符中运行以下命令启动Neovim：\n     ```\n     nvim\n     ```\n   - Neovim将读取配置文件，并根据您的设置进行初始化。\n\n4. 进一步配置：\n   - 您可以根据个人需求进一步定制和配置Neovim。例如，您可以选择安装插件管理器（如vim-plug、dein.vim）来管理插件，配置自动补全、主题、快捷键映射等。\n\n请记住，Neovim具有丰富的配置选项和功能，您可以根据自己的需求进行定制和扩展。官方文档（https://neovim.io/doc/user/）是了解更多Neovim功能和配置的绝佳资源。\n\n\n下面是一个简单的示例，展示了Neovim的基本配置：\n\n```vim\n\" 设置行号显示\nset number\n\n\" 启用语法高亮\nsyntax enable\n\n\" 设置配色方案\ncolorscheme gruvbox\n\n\" 设置自动缩进\nset autoindent\n\n\" 启用文件类型检测\nfiletype plugin indent on\n\n\" 设置tab宽度为4个空格\nset tabstop=4\nset shiftwidth=4\nset expandtab\n\n\" 启用鼠标支持\nset mouse=a\n\n\" 设置搜索时忽略大小写\nset ignorecase\n\n\" 启用增量搜索\nset incsearch\n\n\" 设置快捷键映射\nnnoremap <leader>w :w<CR>\nnnoremap <leader>q :q<CR>\n\n\" 自动关闭括号匹配\nautocmd FileType ruby,python,perl,php,javascript,vim,jinja,html,xml,yaml,yml autocmd BufEnter * silent! %s/\\s\\+$//e | syntax sync fromstart\n\n\" 启用插件管理器\n\" 以下是使用vim-plug插件管理器的示例配置\ncall plug#begin('~/.vim/plugged')\n\n\" 插件列表\n\" 插件1: NERDTree 文件资源管理器\nPlug 'preservim/nerdtree'\n\n\" 插件2: coc.nvim 自动补全和语言服务器支持\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\n\n\" 插件3: vim-commentary 注释插件\nPlug 'tpope/vim-commentary'\n\n\" 结束插件列表\ncall plug#end()\n```\n\n以上示例展示了一些常用的配置选项和插件，包括行号显示、语法高亮、配色方案、自动缩进、文件类型检测、快捷键映射等。同时，示例中使用了vim-plug插件管理器来管理插件的安装和加载。\n\n请注意，这只是一个基本的示例配置，您可以根据自己的需求进行修改和扩展。同时，根据您使用的插件管理器和具体插件的要求，可能需要进行额外的设置和依赖项安装。\n\n您可以将以上配置保存为`~/.config/nvim/init.vim`文件（如果该文件夹和文件不存在，则需要手动创建），Neovim将在启动时加载该配置文件，并应用相应的设置和插件。\n\n","slug":"Neovim-安装与配置","published":1,"updated":"2023-06-04T13:26:11.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchh60005vkeh4y5y45mt","content":"<p>安装和配置Neovim（nvim）包括两个主要步骤：安装Neovim本身和进行基本配置。以下是安装和配置Neovim的一般步骤：</p>\n<ol>\n<li><p>安装Neovim：</p>\n<ul>\n<li>在Linux上，您可以使用包管理器（如apt、dnf、pacman等）进行安装。例如，在Ubuntu上，可以运行以下命令：<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install neovim</span><br></pre></td></tr></tbody></table></figure></li>\n<li>在macOS上，您可以使用Homebrew进行安装。运行以下命令：<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install neovim</span><br></pre></td></tr></tbody></table></figure></li>\n<li>在Windows上，您可以从Neovim的官方网站（<a href=\"https://neovim.io/%EF%BC%89%E4%B8%8B%E8%BD%BD%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82\">https://neovim.io/）下载预编译的安装程序并进行安装。</a></li>\n</ul>\n</li>\n<li><p>基本配置：</p>\n<ul>\n<li>打开终端或命令提示符，并运行以下命令创建配置文件：<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.config/nvim</span><br><span class=\"line\">touch ~/.config/nvim/init.vim</span><br></pre></td></tr></tbody></table></figure></li>\n<li>使用您喜欢的文本编辑器（如Vim、Neovim自带的nvim）打开<code>~/.config/nvim/init.vim</code>文件，并添加您的配置设置。以下是一个基本配置示例：<figure class=\"highlight vim\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\" 启用行号显示</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 启用语法高亮</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 设置tab宽度为4个空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"built_in\">shiftwidth</span>=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab</span><br></pre></td></tr></tbody></table></figure></li>\n<li>保存并关闭文件。</li>\n</ul>\n</li>\n<li><p>启动Neovim：</p>\n<ul>\n<li>在终端或命令提示符中运行以下命令启动Neovim：<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim</span><br></pre></td></tr></tbody></table></figure></li>\n<li>Neovim将读取配置文件，并根据您的设置进行初始化。</li>\n</ul>\n</li>\n<li><p>进一步配置：</p>\n<ul>\n<li>您可以根据个人需求进一步定制和配置Neovim。例如，您可以选择安装插件管理器（如vim-plug、dein.vim）来管理插件，配置自动补全、主题、快捷键映射等。</li>\n</ul>\n</li>\n</ol>\n<p>请记住，Neovim具有丰富的配置选项和功能，您可以根据自己的需求进行定制和扩展。官方文档（<a href=\"https://neovim.io/doc/user/%EF%BC%89%E6%98%AF%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9ANeovim%E5%8A%9F%E8%83%BD%E5%92%8C%E9%85%8D%E7%BD%AE%E7%9A%84%E7%BB%9D%E4%BD%B3%E8%B5%84%E6%BA%90%E3%80%82\">https://neovim.io/doc/user/）是了解更多Neovim功能和配置的绝佳资源。</a></p>\n<p>下面是一个简单的示例，展示了Neovim的基本配置：</p>\n<figure class=\"highlight vim\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\" 设置行号显示</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 启用语法高亮</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 设置配色方案</span></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> gruvbox</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 设置自动缩进</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autoindent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 启用文件类型检测</span></span><br><span class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 设置tab宽度为4个空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"built_in\">shiftwidth</span>=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 启用鼠标支持</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mouse=<span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 设置搜索时忽略大小写</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> ignorecase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 启用增量搜索</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> incsearch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 设置快捷键映射</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span><span class=\"keyword\">w</span> :<span class=\"keyword\">w</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span>q :q<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 自动关闭括号匹配</span></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> FileType <span class=\"keyword\">ruby</span>,<span class=\"keyword\">python</span>,<span class=\"keyword\">perl</span>,php,javascript,<span class=\"keyword\">vim</span>,jinja,html,xml,yaml,yml <span class=\"keyword\">autocmd</span> BufEnter * silent! %s/\\s\\+$//<span class=\"keyword\">e</span> | <span class=\"keyword\">syntax</span> <span class=\"keyword\">sync</span> fromstart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 启用插件管理器</span></span><br><span class=\"line\"><span class=\"comment\">\" 以下是使用vim-plug插件管理器的示例配置</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> plug#begin(<span class=\"string\">'~/.vim/plugged'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 插件列表</span></span><br><span class=\"line\"><span class=\"comment\">\" 插件1: NERDTree 文件资源管理器</span></span><br><span class=\"line\">Plug <span class=\"string\">'preservim/nerdtree'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 插件2: coc.nvim 自动补全和语言服务器支持</span></span><br><span class=\"line\">Plug <span class=\"string\">'neoclide/coc.nvim'</span>, {<span class=\"string\">'branch'</span>: <span class=\"string\">'release'</span>}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 插件3: vim-commentary 注释插件</span></span><br><span class=\"line\">Plug <span class=\"string\">'tpope/vim-commentary'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">\" 结束插件列表</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> plug#end()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>以上示例展示了一些常用的配置选项和插件，包括行号显示、语法高亮、配色方案、自动缩进、文件类型检测、快捷键映射等。同时，示例中使用了vim-plug插件管理器来管理插件的安装和加载。</p>\n<p>请注意，这只是一个基本的示例配置，您可以根据自己的需求进行修改和扩展。同时，根据您使用的插件管理器和具体插件的要求，可能需要进行额外的设置和依赖项安装。</p>\n<p>您可以将以上配置保存为<code>~/.config/nvim/init.vim</code>文件（如果该文件夹和文件不存在，则需要手动创建），Neovim将在启动时加载该配置文件，并应用相应的设置和插件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装和配置Neovim（nvim）包括两个主要步骤：安装Neovim本身和进行基本配置。以下是安装和配置Neovim的一般步骤：</p>\n<ol>\n<li><p>安装Neovim：</p>\n<ul>\n<li>在Linux上，您可以使用包管理器（如apt、dnf、pacman等）进行安装。例如，在Ubuntu上，可以运行以下命令：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install neovim</span><br></pre></td></tr></table></figure></li>\n<li>在macOS上，您可以使用Homebrew进行安装。运行以下命令：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install neovim</span><br></pre></td></tr></table></figure></li>\n<li>在Windows上，您可以从Neovim的官方网站（<a href=\"https://neovim.io/%EF%BC%89%E4%B8%8B%E8%BD%BD%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82\">https://neovim.io/）下载预编译的安装程序并进行安装。</a></li>\n</ul>\n</li>\n<li><p>基本配置：</p>\n<ul>\n<li>打开终端或命令提示符，并运行以下命令创建配置文件：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.config/nvim</span><br><span class=\"line\">touch ~/.config/nvim/init.vim</span><br></pre></td></tr></table></figure></li>\n<li>使用您喜欢的文本编辑器（如Vim、Neovim自带的nvim）打开<code>~/.config/nvim/init.vim</code>文件，并添加您的配置设置。以下是一个基本配置示例：<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot; 启用行号显示</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 启用语法高亮</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 设置tab宽度为4个空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"built_in\">shiftwidth</span>=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab</span><br></pre></td></tr></table></figure></li>\n<li>保存并关闭文件。</li>\n</ul>\n</li>\n<li><p>启动Neovim：</p>\n<ul>\n<li>在终端或命令提示符中运行以下命令启动Neovim：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvim</span><br></pre></td></tr></table></figure></li>\n<li>Neovim将读取配置文件，并根据您的设置进行初始化。</li>\n</ul>\n</li>\n<li><p>进一步配置：</p>\n<ul>\n<li>您可以根据个人需求进一步定制和配置Neovim。例如，您可以选择安装插件管理器（如vim-plug、dein.vim）来管理插件，配置自动补全、主题、快捷键映射等。</li>\n</ul>\n</li>\n</ol>\n<p>请记住，Neovim具有丰富的配置选项和功能，您可以根据自己的需求进行定制和扩展。官方文档（<a href=\"https://neovim.io/doc/user/%EF%BC%89%E6%98%AF%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9ANeovim%E5%8A%9F%E8%83%BD%E5%92%8C%E9%85%8D%E7%BD%AE%E7%9A%84%E7%BB%9D%E4%BD%B3%E8%B5%84%E6%BA%90%E3%80%82\">https://neovim.io/doc/user/）是了解更多Neovim功能和配置的绝佳资源。</a></p>\n<p>下面是一个简单的示例，展示了Neovim的基本配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot; 设置行号显示</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 启用语法高亮</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 设置配色方案</span></span><br><span class=\"line\"><span class=\"keyword\">colorscheme</span> gruvbox</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 设置自动缩进</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autoindent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 启用文件类型检测</span></span><br><span class=\"line\"><span class=\"keyword\">filetype</span> plugin <span class=\"built_in\">indent</span> <span class=\"keyword\">on</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 设置tab宽度为4个空格</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tabstop=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"built_in\">shiftwidth</span>=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> expandtab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 启用鼠标支持</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mouse=<span class=\"keyword\">a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 设置搜索时忽略大小写</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> ignorecase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 启用增量搜索</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> incsearch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 设置快捷键映射</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span><span class=\"keyword\">w</span> :<span class=\"keyword\">w</span><span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;leader&gt;</span>q :q<span class=\"symbol\">&lt;CR&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 自动关闭括号匹配</span></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> FileType <span class=\"keyword\">ruby</span>,<span class=\"keyword\">python</span>,<span class=\"keyword\">perl</span>,php,javascript,<span class=\"keyword\">vim</span>,jinja,html,xml,yaml,yml <span class=\"keyword\">autocmd</span> BufEnter * silent! %s/\\s\\+$//<span class=\"keyword\">e</span> | <span class=\"keyword\">syntax</span> <span class=\"keyword\">sync</span> fromstart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 启用插件管理器</span></span><br><span class=\"line\"><span class=\"comment\">&quot; 以下是使用vim-plug插件管理器的示例配置</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> plug#begin(<span class=\"string\">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 插件列表</span></span><br><span class=\"line\"><span class=\"comment\">&quot; 插件1: NERDTree 文件资源管理器</span></span><br><span class=\"line\">Plug <span class=\"string\">&#x27;preservim/nerdtree&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 插件2: coc.nvim 自动补全和语言服务器支持</span></span><br><span class=\"line\">Plug <span class=\"string\">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class=\"string\">&#x27;branch&#x27;</span>: <span class=\"string\">&#x27;release&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 插件3: vim-commentary 注释插件</span></span><br><span class=\"line\">Plug <span class=\"string\">&#x27;tpope/vim-commentary&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&quot; 结束插件列表</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> plug#end()</span><br></pre></td></tr></table></figure>\n\n<p>以上示例展示了一些常用的配置选项和插件，包括行号显示、语法高亮、配色方案、自动缩进、文件类型检测、快捷键映射等。同时，示例中使用了vim-plug插件管理器来管理插件的安装和加载。</p>\n<p>请注意，这只是一个基本的示例配置，您可以根据自己的需求进行修改和扩展。同时，根据您使用的插件管理器和具体插件的要求，可能需要进行额外的设置和依赖项安装。</p>\n<p>您可以将以上配置保存为<code>~/.config/nvim/init.vim</code>文件（如果该文件夹和文件不存在，则需要手动创建），Neovim将在启动时加载该配置文件，并应用相应的设置和插件。</p>\n"},{"title":"github: workflow","date":"2023-06-04T13:12:42.000Z","_content":"要在GitHub Actions中执行测试脚本，您可以按照以下步骤进行操作：\n\n1. 在您的代码库中创建一个名为`.github/workflows`的目录（如果该目录不存在）。\n\n2. 在`.github/workflows`目录中创建一个新的YAML文件，用于定义工作流程。您可以根据需要将该文件命名为`test.yml`或其他适当的名称。\n\n3. 在`test.yml`文件中编写工作流程的定义。以下是一个示例的基本配置：\n\n```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.x\n\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          # 运行您的测试脚本的命令\n          python test_script.py\n```\n\n在上述示例中，工作流程在`main`分支的推送和拉取请求事件时触发。它定义了一个名为`test`的作业，该作业在最新版本的Ubuntu操作系统上运行。作业包含一系列步骤，例如检出代码、设置Python环境、安装依赖项和运行测试脚本。\n\n在示例中的最后一个步骤中，使用`run`关键字来执行测试脚本的命令。您需要根据实际情况调整该命令，确保它与您的项目和测试脚本的要求一致。\n\n4. 将`test.yml`文件推送到代码库的`.github/workflows`目录中。\n\n5. 在GitHub上打开您的代码库，导航到“Actions”选项卡，您将看到您的工作流程正在运行。您可以查看工作流程的执行状态、日志和输出。\n\n6. 每当有新的代码推送到`main`分支时，GitHub将自动运行工作流程，并执行定义的测试脚本。\n\n通过这样的设置，您可以确保在每次代码更改时自动运行测试脚本，并及时获取测试结果和反馈。请根据您的项目和需求进行自定义和调整。\n\n\n --- \n<font size=8> writed by chatgpt </font>\n","source":"_posts/github-workflow.md","raw":"---\ntitle: 'github: workflow'\ndate: 2023-06-04 21:12:42\ntags: \n    - github\n---\n要在GitHub Actions中执行测试脚本，您可以按照以下步骤进行操作：\n\n1. 在您的代码库中创建一个名为`.github/workflows`的目录（如果该目录不存在）。\n\n2. 在`.github/workflows`目录中创建一个新的YAML文件，用于定义工作流程。您可以根据需要将该文件命名为`test.yml`或其他适当的名称。\n\n3. 在`test.yml`文件中编写工作流程的定义。以下是一个示例的基本配置：\n\n```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.x\n\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          # 运行您的测试脚本的命令\n          python test_script.py\n```\n\n在上述示例中，工作流程在`main`分支的推送和拉取请求事件时触发。它定义了一个名为`test`的作业，该作业在最新版本的Ubuntu操作系统上运行。作业包含一系列步骤，例如检出代码、设置Python环境、安装依赖项和运行测试脚本。\n\n在示例中的最后一个步骤中，使用`run`关键字来执行测试脚本的命令。您需要根据实际情况调整该命令，确保它与您的项目和测试脚本的要求一致。\n\n4. 将`test.yml`文件推送到代码库的`.github/workflows`目录中。\n\n5. 在GitHub上打开您的代码库，导航到“Actions”选项卡，您将看到您的工作流程正在运行。您可以查看工作流程的执行状态、日志和输出。\n\n6. 每当有新的代码推送到`main`分支时，GitHub将自动运行工作流程，并执行定义的测试脚本。\n\n通过这样的设置，您可以确保在每次代码更改时自动运行测试脚本，并及时获取测试结果和反馈。请根据您的项目和需求进行自定义和调整。\n\n\n --- \n<font size=8> writed by chatgpt </font>\n","slug":"github-workflow","published":1,"updated":"2023-06-04T13:18:11.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchh70006vkeh5vi3cv03","content":"<p>要在GitHub Actions中执行测试脚本，您可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>在您的代码库中创建一个名为<code>.github/workflows</code>的目录（如果该目录不存在）。</p>\n</li>\n<li><p>在<code>.github/workflows</code>目录中创建一个新的YAML文件，用于定义工作流程。您可以根据需要将该文件命名为<code>test.yml</code>或其他适当的名称。</p>\n</li>\n<li><p>在<code>test.yml</code>文件中编写工作流程的定义。以下是一个示例的基本配置：</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">test:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.</span><span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">pip</span> <span class=\"string\">install</span> <span class=\"string\">-r</span> <span class=\"string\">requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">tests</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          # 运行您的测试脚本的命令</span></span><br><span class=\"line\"><span class=\"string\">          python test_script.py</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>在上述示例中，工作流程在<code>main</code>分支的推送和拉取请求事件时触发。它定义了一个名为<code>test</code>的作业，该作业在最新版本的Ubuntu操作系统上运行。作业包含一系列步骤，例如检出代码、设置Python环境、安装依赖项和运行测试脚本。</p>\n<p>在示例中的最后一个步骤中，使用<code>run</code>关键字来执行测试脚本的命令。您需要根据实际情况调整该命令，确保它与您的项目和测试脚本的要求一致。</p>\n<ol start=\"4\">\n<li><p>将<code>test.yml</code>文件推送到代码库的<code>.github/workflows</code>目录中。</p>\n</li>\n<li><p>在GitHub上打开您的代码库，导航到“Actions”选项卡，您将看到您的工作流程正在运行。您可以查看工作流程的执行状态、日志和输出。</p>\n</li>\n<li><p>每当有新的代码推送到<code>main</code>分支时，GitHub将自动运行工作流程，并执行定义的测试脚本。</p>\n</li>\n</ol>\n<p>通过这样的设置，您可以确保在每次代码更改时自动运行测试脚本，并及时获取测试结果和反馈。请根据您的项目和需求进行自定义和调整。</p>\n<hr>\n<p><font size=\"8\"> writed by chatgpt </font></p>\n","site":{"data":{}},"excerpt":"","more":"<p>要在GitHub Actions中执行测试脚本，您可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>在您的代码库中创建一个名为<code>.github/workflows</code>的目录（如果该目录不存在）。</p>\n</li>\n<li><p>在<code>.github/workflows</code>目录中创建一个新的YAML文件，用于定义工作流程。您可以根据需要将该文件命名为<code>test.yml</code>或其他适当的名称。</p>\n</li>\n<li><p>在<code>test.yml</code>文件中编写工作流程的定义。以下是一个示例的基本配置：</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">CI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">test:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">code</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Python</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.</span><span class=\"string\">x</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">pip</span> <span class=\"string\">install</span> <span class=\"string\">-r</span> <span class=\"string\">requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">tests</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          # 运行您的测试脚本的命令</span></span><br><span class=\"line\"><span class=\"string\">          python test_script.py</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，工作流程在<code>main</code>分支的推送和拉取请求事件时触发。它定义了一个名为<code>test</code>的作业，该作业在最新版本的Ubuntu操作系统上运行。作业包含一系列步骤，例如检出代码、设置Python环境、安装依赖项和运行测试脚本。</p>\n<p>在示例中的最后一个步骤中，使用<code>run</code>关键字来执行测试脚本的命令。您需要根据实际情况调整该命令，确保它与您的项目和测试脚本的要求一致。</p>\n<ol start=\"4\">\n<li><p>将<code>test.yml</code>文件推送到代码库的<code>.github/workflows</code>目录中。</p>\n</li>\n<li><p>在GitHub上打开您的代码库，导航到“Actions”选项卡，您将看到您的工作流程正在运行。您可以查看工作流程的执行状态、日志和输出。</p>\n</li>\n<li><p>每当有新的代码推送到<code>main</code>分支时，GitHub将自动运行工作流程，并执行定义的测试脚本。</p>\n</li>\n</ol>\n<p>通过这样的设置，您可以确保在每次代码更改时自动运行测试脚本，并及时获取测试结果和反馈。请根据您的项目和需求进行自定义和调整。</p>\n<hr>\n<p><font size=8> writed by chatgpt </font></p>\n"},{"title":"github: 问题收集","date":"2023-06-04T13:41:09.000Z","_content":"1. Recv failure: Connection reset by peer\nFirstly try this. \n```\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n2. remote: Support for password authentication was removed on Augus\n```\n git remote set-url origin https://<new token>@github.com/<用户名>/<仓名>.git\n```\n\n3. git commit --amend 使用nano编辑器，非常不方便\n```\ngit config --global core.editor vim\n```\n","source":"_posts/github-问题收集.md","raw":"---\ntitle: 'github: 问题收集'\ndate: 2023-06-04 21:41:09\ntags:\n    - git\n---\n1. Recv failure: Connection reset by peer\nFirstly try this. \n```\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n2. remote: Support for password authentication was removed on Augus\n```\n git remote set-url origin https://<new token>@github.com/<用户名>/<仓名>.git\n```\n\n3. git commit --amend 使用nano编辑器，非常不方便\n```\ngit config --global core.editor vim\n```\n","slug":"github-问题收集","published":1,"updated":"2023-06-04T14:45:08.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchh80009vkehds5r50uv","content":"<ol>\n<li><p>Recv failure: Connection reset by peer<br>Firstly try this. </p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>remote: Support for password authentication was removed on Augus</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://&lt;new token&gt;@github.com/&lt;用户名&gt;/&lt;仓名&gt;.git</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>git commit –amend 使用nano编辑器，非常不方便</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.editor vim</span><br></pre></td></tr></tbody></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>Recv failure: Connection reset by peer<br>Firstly try this. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>remote: Support for password authentication was removed on Augus</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://&lt;new token&gt;@github.com/&lt;用户名&gt;/&lt;仓名&gt;.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git commit –amend 使用nano编辑器，非常不方便</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.editor vim</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-06-04T07:40:26.670Z","updated":"2023-06-04T07:40:26.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchh9000avkeh6rcg0ou6","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hexo备份迁移","date":"2023-06-04T09:00:29.000Z","_content":"hexo 部署到github 之后，如何进行进行迁移备份？\n\n### 1. 备份分支\n\n备份文件的分支和部署的分支要分开，比如这里我选择main 分支作为备份文件的分支，选择master作为部署分支。\n\n```shell\n ✗ echo `git branch`\n* main master\n```\n\n### 2. 新机器拉取拉取分支\n\n1. 新的机器首先配置hexo 所需环境，安装必须的 nodejs、npm、hexo，建议直接下载node的二进制压缩包，然后直接解压，设置软连接。\n\n ```sh\n## 1.下载地址\nhttps://nodejs.org/en/download/releases\n\n## 2. 设置软连接\nln -s <解压文件>/some path/node /usr/local/bin/node\nln -s <解压文件>/some path/npm /usr/local/bin/npm\nln -s <解压文件>/some path/hexo /usr/local/bin/hexo\n ```\n\n2. 拉取分支\n\n```shell\ngit clone htpps://.....git  <somepath>\ncd <somepath>\nnpm install\n```\n\n### 3.  Other\n\n1. hexo主题不匹配导致无法生成静态文件 *.html，此时可以将主题设置成默认的landscape，查看是否是主题问题。\n\n2. github权限问题，除了配置ssh 密钥外，还要设置token。\n \n","source":"_posts/hexo备份迁移.md","raw":"---\ntitle: hexo备份迁移\ndate: 2023-06-04 17:00:29\ntags:\n    - linux\n    - hexo\n    - github\n---\nhexo 部署到github 之后，如何进行进行迁移备份？\n\n### 1. 备份分支\n\n备份文件的分支和部署的分支要分开，比如这里我选择main 分支作为备份文件的分支，选择master作为部署分支。\n\n```shell\n ✗ echo `git branch`\n* main master\n```\n\n### 2. 新机器拉取拉取分支\n\n1. 新的机器首先配置hexo 所需环境，安装必须的 nodejs、npm、hexo，建议直接下载node的二进制压缩包，然后直接解压，设置软连接。\n\n ```sh\n## 1.下载地址\nhttps://nodejs.org/en/download/releases\n\n## 2. 设置软连接\nln -s <解压文件>/some path/node /usr/local/bin/node\nln -s <解压文件>/some path/npm /usr/local/bin/npm\nln -s <解压文件>/some path/hexo /usr/local/bin/hexo\n ```\n\n2. 拉取分支\n\n```shell\ngit clone htpps://.....git  <somepath>\ncd <somepath>\nnpm install\n```\n\n### 3.  Other\n\n1. hexo主题不匹配导致无法生成静态文件 *.html，此时可以将主题设置成默认的landscape，查看是否是主题问题。\n\n2. github权限问题，除了配置ssh 密钥外，还要设置token。\n \n","slug":"hexo备份迁移","published":1,"updated":"2023-06-04T09:17:44.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchhc000cvkeh4f7293wd","content":"<p>hexo 部署到github 之后，如何进行进行迁移备份？</p>\n<h3 id=\"1-备份分支\"><a href=\"#1-备份分支\" class=\"headerlink\" title=\"1. 备份分支\"></a>1. 备份分支</h3><p>备份文件的分支和部署的分支要分开，比如这里我选择main 分支作为备份文件的分支，选择master作为部署分支。</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✗ echo `git branch`</span><br><span class=\"line\">* main master</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-新机器拉取拉取分支\"><a href=\"#2-新机器拉取拉取分支\" class=\"headerlink\" title=\"2. 新机器拉取拉取分支\"></a>2. 新机器拉取拉取分支</h3><ol>\n<li>新的机器首先配置hexo 所需环境，安装必须的 nodejs、npm、hexo，建议直接下载node的二进制压缩包，然后直接解压，设置软连接。</li>\n</ol>\n <figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 1.下载地址</span></span><br><span class=\"line\">https://nodejs.org/en/download/releases</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 2. 设置软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s &lt;解压文件&gt;/some path/node /usr/local/bin/node</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s &lt;解压文件&gt;/some path/npm /usr/local/bin/npm</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s &lt;解压文件&gt;/some path/hexo /usr/local/bin/hexo</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>拉取分支</li>\n</ol>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone htpps://.....git  &lt;somepath&gt;</span><br><span class=\"line\">cd &lt;somepath&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-Other\"><a href=\"#3-Other\" class=\"headerlink\" title=\"3.  Other\"></a>3.  Other</h3><ol>\n<li><p>hexo主题不匹配导致无法生成静态文件 *.html，此时可以将主题设置成默认的landscape，查看是否是主题问题。</p>\n</li>\n<li><p>github权限问题，除了配置ssh 密钥外，还要设置token。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>hexo 部署到github 之后，如何进行进行迁移备份？</p>\n<h3 id=\"1-备份分支\"><a href=\"#1-备份分支\" class=\"headerlink\" title=\"1. 备份分支\"></a>1. 备份分支</h3><p>备份文件的分支和部署的分支要分开，比如这里我选择main 分支作为备份文件的分支，选择master作为部署分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ✗ echo `git branch`</span><br><span class=\"line\">* main master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-新机器拉取拉取分支\"><a href=\"#2-新机器拉取拉取分支\" class=\"headerlink\" title=\"2. 新机器拉取拉取分支\"></a>2. 新机器拉取拉取分支</h3><ol>\n<li>新的机器首先配置hexo 所需环境，安装必须的 nodejs、npm、hexo，建议直接下载node的二进制压缩包，然后直接解压，设置软连接。</li>\n</ol>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 1.下载地址</span></span><br><span class=\"line\">https://nodejs.org/en/download/releases</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 2. 设置软连接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s &lt;解压文件&gt;/some path/node /usr/local/bin/node</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s &lt;解压文件&gt;/some path/npm /usr/local/bin/npm</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s &lt;解压文件&gt;/some path/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取分支</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone htpps://.....git  &lt;somepath&gt;</span><br><span class=\"line\">cd &lt;somepath&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Other\"><a href=\"#3-Other\" class=\"headerlink\" title=\"3.  Other\"></a>3.  Other</h3><ol>\n<li><p>hexo主题不匹配导致无法生成静态文件 *.html，此时可以将主题设置成默认的landscape，查看是否是主题问题。</p>\n</li>\n<li><p>github权限问题，除了配置ssh 密钥外，还要设置token。</p>\n</li>\n</ol>\n"},{"date":"2022-11-09T15:09:50.000Z","title":"Q&A","_content":"\n# Interview 问题收集\n\n###### memcopy 与 memmove谁更安全？\n\nmemmove 更安全，memove 可以正确处理地址重叠的部分。\n\n###### const 与 define 在定义常量的区别？\n\nconst 申明的常量会进行类型检查，define只是替换，不做类型检查。\n\n###### static 关键字的作用？\n\nstatic申明的类变量属于类，不属于某个对象，是所有类共享。\n\n###### Cache和主存内存一致性\n\n1. write-through 写操作是数据写入cache又写入内存。\n2. write-back 写操作只是在数据被踢出cache时才写入内存。\n\n###### 指令调度的基本流程\n\n1. 构建DAG图，对DAG图进行处理\n2. 初始化，包括调度策略，DAG图，调度器队列；\n3. 选取节点进行调度，pickNode方法在自定义调度策略中被重写，GenericScheduler::pickNode（）获取RegionPolicy中设置的次序>进行遍历，pickNode方法返回一个SUnit（Scheduling unit），这是调度图中的一个节点表示，包含节点的一系列属性和状态，譬如isPending，isAvailable，isScheduled等用于记录节点状态的信息；调试时可以通过SUnit.getInstr()->dump()打印出节点中指令的信息。\n4. scheduleMI，移动指令和更新寄存器压力信息\n5. 更新调度状态，将SU->isScheduled 设为 true。\n\n###### std::cout 与 std::cerr 的区别?\n\n​\tstd::cerr不需要被发送缓冲区，可以直接显示输出，std::cout 为了减少刷屏的次数，设置了缓冲区，这样在遇到std::endl 或者\"\\n\">时会调用os.flush把缓冲区内容输出到显示器上进行显示。","source":"_posts/interview.md","raw":"date: 2022-11-09 23:09:50\n\ntitle: Q&A\n\ntags:\n\n- interview\n- c/c++\n- LLVM\n---\n\n# Interview 问题收集\n\n###### memcopy 与 memmove谁更安全？\n\nmemmove 更安全，memove 可以正确处理地址重叠的部分。\n\n###### const 与 define 在定义常量的区别？\n\nconst 申明的常量会进行类型检查，define只是替换，不做类型检查。\n\n###### static 关键字的作用？\n\nstatic申明的类变量属于类，不属于某个对象，是所有类共享。\n\n###### Cache和主存内存一致性\n\n1. write-through 写操作是数据写入cache又写入内存。\n2. write-back 写操作只是在数据被踢出cache时才写入内存。\n\n###### 指令调度的基本流程\n\n1. 构建DAG图，对DAG图进行处理\n2. 初始化，包括调度策略，DAG图，调度器队列；\n3. 选取节点进行调度，pickNode方法在自定义调度策略中被重写，GenericScheduler::pickNode（）获取RegionPolicy中设置的次序>进行遍历，pickNode方法返回一个SUnit（Scheduling unit），这是调度图中的一个节点表示，包含节点的一系列属性和状态，譬如isPending，isAvailable，isScheduled等用于记录节点状态的信息；调试时可以通过SUnit.getInstr()->dump()打印出节点中指令的信息。\n4. scheduleMI，移动指令和更新寄存器压力信息\n5. 更新调度状态，将SU->isScheduled 设为 true。\n\n###### std::cout 与 std::cerr 的区别?\n\n​\tstd::cerr不需要被发送缓冲区，可以直接显示输出，std::cout 为了减少刷屏的次数，设置了缓冲区，这样在遇到std::endl 或者\"\\n\">时会调用os.flush把缓冲区内容输出到显示器上进行显示。","slug":"interview","published":1,"updated":"2023-06-04T07:40:26.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchhd000dvkeh1z1s86q6","content":"<h1 id=\"Interview-问题收集\"><a href=\"#Interview-问题收集\" class=\"headerlink\" title=\"Interview 问题收集\"></a>Interview 问题收集</h1><h6 id=\"memcopy-与-memmove谁更安全？\"><a href=\"#memcopy-与-memmove谁更安全？\" class=\"headerlink\" title=\"memcopy 与 memmove谁更安全？\"></a>memcopy 与 memmove谁更安全？</h6><p>memmove 更安全，memove 可以正确处理地址重叠的部分。</p>\n<h6 id=\"const-与-define-在定义常量的区别？\"><a href=\"#const-与-define-在定义常量的区别？\" class=\"headerlink\" title=\"const 与 define 在定义常量的区别？\"></a>const 与 define 在定义常量的区别？</h6><p>const 申明的常量会进行类型检查，define只是替换，不做类型检查。</p>\n<h6 id=\"static-关键字的作用？\"><a href=\"#static-关键字的作用？\" class=\"headerlink\" title=\"static 关键字的作用？\"></a>static 关键字的作用？</h6><p>static申明的类变量属于类，不属于某个对象，是所有类共享。</p>\n<h6 id=\"Cache和主存内存一致性\"><a href=\"#Cache和主存内存一致性\" class=\"headerlink\" title=\"Cache和主存内存一致性\"></a>Cache和主存内存一致性</h6><ol>\n<li>write-through 写操作是数据写入cache又写入内存。</li>\n<li>write-back 写操作只是在数据被踢出cache时才写入内存。</li>\n</ol>\n<h6 id=\"指令调度的基本流程\"><a href=\"#指令调度的基本流程\" class=\"headerlink\" title=\"指令调度的基本流程\"></a>指令调度的基本流程</h6><ol>\n<li>构建DAG图，对DAG图进行处理</li>\n<li>初始化，包括调度策略，DAG图，调度器队列；</li>\n<li>选取节点进行调度，pickNode方法在自定义调度策略中被重写，GenericScheduler::pickNode（）获取RegionPolicy中设置的次序&gt;进行遍历，pickNode方法返回一个SUnit（Scheduling unit），这是调度图中的一个节点表示，包含节点的一系列属性和状态，譬如isPending，isAvailable，isScheduled等用于记录节点状态的信息；调试时可以通过SUnit.getInstr()-&gt;dump()打印出节点中指令的信息。</li>\n<li>scheduleMI，移动指令和更新寄存器压力信息</li>\n<li>更新调度状态，将SU-&gt;isScheduled 设为 true。</li>\n</ol>\n<h6 id=\"std-cout-与-std-cerr-的区别\"><a href=\"#std-cout-与-std-cerr-的区别\" class=\"headerlink\" title=\"std::cout 与 std::cerr 的区别?\"></a>std::cout 与 std::cerr 的区别?</h6><p>​\tstd::cerr不需要被发送缓冲区，可以直接显示输出，std::cout 为了减少刷屏的次数，设置了缓冲区，这样在遇到std::endl 或者”\\n”&gt;时会调用os.flush把缓冲区内容输出到显示器上进行显示。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Interview-问题收集\"><a href=\"#Interview-问题收集\" class=\"headerlink\" title=\"Interview 问题收集\"></a>Interview 问题收集</h1><h6 id=\"memcopy-与-memmove谁更安全？\"><a href=\"#memcopy-与-memmove谁更安全？\" class=\"headerlink\" title=\"memcopy 与 memmove谁更安全？\"></a>memcopy 与 memmove谁更安全？</h6><p>memmove 更安全，memove 可以正确处理地址重叠的部分。</p>\n<h6 id=\"const-与-define-在定义常量的区别？\"><a href=\"#const-与-define-在定义常量的区别？\" class=\"headerlink\" title=\"const 与 define 在定义常量的区别？\"></a>const 与 define 在定义常量的区别？</h6><p>const 申明的常量会进行类型检查，define只是替换，不做类型检查。</p>\n<h6 id=\"static-关键字的作用？\"><a href=\"#static-关键字的作用？\" class=\"headerlink\" title=\"static 关键字的作用？\"></a>static 关键字的作用？</h6><p>static申明的类变量属于类，不属于某个对象，是所有类共享。</p>\n<h6 id=\"Cache和主存内存一致性\"><a href=\"#Cache和主存内存一致性\" class=\"headerlink\" title=\"Cache和主存内存一致性\"></a>Cache和主存内存一致性</h6><ol>\n<li>write-through 写操作是数据写入cache又写入内存。</li>\n<li>write-back 写操作只是在数据被踢出cache时才写入内存。</li>\n</ol>\n<h6 id=\"指令调度的基本流程\"><a href=\"#指令调度的基本流程\" class=\"headerlink\" title=\"指令调度的基本流程\"></a>指令调度的基本流程</h6><ol>\n<li>构建DAG图，对DAG图进行处理</li>\n<li>初始化，包括调度策略，DAG图，调度器队列；</li>\n<li>选取节点进行调度，pickNode方法在自定义调度策略中被重写，GenericScheduler::pickNode（）获取RegionPolicy中设置的次序&gt;进行遍历，pickNode方法返回一个SUnit（Scheduling unit），这是调度图中的一个节点表示，包含节点的一系列属性和状态，譬如isPending，isAvailable，isScheduled等用于记录节点状态的信息；调试时可以通过SUnit.getInstr()-&gt;dump()打印出节点中指令的信息。</li>\n<li>scheduleMI，移动指令和更新寄存器压力信息</li>\n<li>更新调度状态，将SU-&gt;isScheduled 设为 true。</li>\n</ol>\n<h6 id=\"std-cout-与-std-cerr-的区别\"><a href=\"#std-cout-与-std-cerr-的区别\" class=\"headerlink\" title=\"std::cout 与 std::cerr 的区别?\"></a>std::cout 与 std::cerr 的区别?</h6><p>​\tstd::cerr不需要被发送缓冲区，可以直接显示输出，std::cout 为了减少刷屏的次数，设置了缓冲区，这样在遇到std::endl 或者”\\n”&gt;时会调用os.flush把缓冲区内容输出到显示器上进行显示。</p>\n"},{"title":"ubuntu安装zsh","date":"2023-06-04T07:16:19.000Z","_content":"\n### zsh\n\n#### 安装\n\n```shell\nsudo apt install zsh\n```\n\n#### 切换zsh\n\n```shell\nchsh -s /bin/zsh\n```\n\n#### 查看\n\n```shell\necho $SHELL\n```\n\n\n\n### oh-my-zsh\n\n#### 安装\n\n```shell\ngit clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh\n```\n\n\n\n#### 配置zsh\n\n```shell\n## 拷贝一个模板配置\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\n## 下载两个插件试试\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting\n\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions\n\n## 添加到~/.zshrc 中\nplugins=(git\n        zsh-autosuggestions\n        zsh-syntax-highlighting\n        )\n\n```\n\n\n\n#### 使之生效\n\n```shell\nsource ~/.zshrc\n```\n\n","source":"_posts/zsh.md","raw":"---\ntitle: ubuntu安装zsh\ndate: 2023-06-04 15:16:19\ntags:\n---\n\n### zsh\n\n#### 安装\n\n```shell\nsudo apt install zsh\n```\n\n#### 切换zsh\n\n```shell\nchsh -s /bin/zsh\n```\n\n#### 查看\n\n```shell\necho $SHELL\n```\n\n\n\n### oh-my-zsh\n\n#### 安装\n\n```shell\ngit clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh\n```\n\n\n\n#### 配置zsh\n\n```shell\n## 拷贝一个模板配置\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\n## 下载两个插件试试\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting\n\ngit clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions\n\n## 添加到~/.zshrc 中\nplugins=(git\n        zsh-autosuggestions\n        zsh-syntax-highlighting\n        )\n\n```\n\n\n\n#### 使之生效\n\n```shell\nsource ~/.zshrc\n```\n\n","slug":"zsh","published":1,"updated":"2023-06-04T07:25:38.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchhf000fvkehcsxg9x4t","content":"<h3 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install zsh</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"切换zsh\"><a href=\"#切换zsh\" class=\"headerlink\" title=\"切换zsh\"></a>切换zsh</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $SHELL</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h3><h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h4 id=\"配置zsh\"><a href=\"#配置zsh\" class=\"headerlink\" title=\"配置zsh\"></a>配置zsh</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 拷贝一个模板配置</span></span></span><br><span class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 下载两个插件试试</span></span></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 添加到~/.zshrc 中</span></span></span><br><span class=\"line\">plugins=(git</span><br><span class=\"line\">        zsh-autosuggestions</span><br><span class=\"line\">        zsh-syntax-highlighting</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h4 id=\"使之生效\"><a href=\"#使之生效\" class=\"headerlink\" title=\"使之生效\"></a>使之生效</h4><figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install zsh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切换zsh\"><a href=\"#切换zsh\" class=\"headerlink\" title=\"切换zsh\"></a>切换zsh</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $SHELL</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h3><h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"配置zsh\"><a href=\"#配置zsh\" class=\"headerlink\" title=\"配置zsh\"></a>配置zsh</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 拷贝一个模板配置</span></span></span><br><span class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 下载两个插件试试</span></span></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 添加到~/.zshrc 中</span></span></span><br><span class=\"line\">plugins=(git</span><br><span class=\"line\">        zsh-autosuggestions</span><br><span class=\"line\">        zsh-syntax-highlighting</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使之生效\"><a href=\"#使之生效\" class=\"headerlink\" title=\"使之生效\"></a>使之生效</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n"},{"title":"linux安装Anaconda以及基本用法","date":"2023-06-04T13:50:31.000Z","_content":"\n要在Linux上安装Anaconda，您可以按照以下步骤进行操作：\n\n1. 下载Anaconda：首先，访问Anaconda官方网站（https://www.anaconda.com/products/individual）并下载适用于Linux的Anaconda安装包。请选择适合您系统的版本（如Python 3.7或Python 3.8）。\n\n2. 打开终端：打开终端应用程序，您可以在系统菜单中找到它。\n\n3. 切换到下载目录：使用`cd`命令切换到您下载Anaconda安装包的目录。例如，如果安装包在主目录的\"Downloads\"文件夹中，可以运行以下命令：\n\n   ```\n   cd ~/Downloads\n   ```\n\n4. 运行安装脚本：在终端中运行以下命令来执行安装脚本（请根据您下载的文件名进行替换）：\n\n   ```\n   bash Anaconda3-<版本号>-Linux-x86_64.sh\n   ```\n\n   注意：请确保将`<版本号>`替换为您下载的Anaconda版本的实际版本号。\n\n5. 阅读并接受许可协议：在安装过程中，您将被要求阅读并接受许可协议。请按照屏幕上的指示进行操作。\n\n6. 选择安装位置：接下来，您将被要求选择Anaconda的安装位置。默认情况下，它会安装在您的主目录下，但您可以选择其他位置。按照屏幕上的指示进行操作。\n\n7. 初始化Anaconda：安装完成后，您将被提示是否要初始化Anaconda。选择\"yes\"以使Anaconda生效并将其添加到您的Shell配置文件（例如，`.bashrc`）。这样，您就可以在终端中使用Anaconda了。\n\n8. 重新加载Shell配置文件：在完成初始化后，重新加载Shell配置文件，以便立即生效。您可以运行以下命令之一：\n\n   - 如果您使用的是bash Shell：\n\n     ```\n     source ~/.bashrc\n     ```\n\n   - 如果您使用的是zsh Shell：\n\n     ```\n     source ~/.zshrc\n     ```\n\n至此，Anaconda已成功安装在您的Linux系统上。您可以在终端中运行`conda`命令来管理和使用Anaconda环境、安装包等。\n\nAnaconda是一个功能强大的Python发行版，它提供了许多有用的命令和工具来管理Python环境和安装包。下面是一些常用的Anaconda命令以及一些有用的包管理命令：\n\n1. 创建和管理环境：\n\n   - 创建新环境：`conda create --name myenv`（\"myenv\"是环境名称，可以替换为您自己的名称）\n   - 激活环境：`conda activate myenv`\n   - 停用环境：`conda deactivate`\n   - 删除环境：`conda remove --name myenv --all`\n\n2. 管理包：\n\n   - 安装包：`conda install packageName`（\"packageName\"是要安装的包名称）\n   - 升级包：`conda update packageName`（更新指定的包到最新版本）\n   - 移除包：`conda remove packageName`（卸载指定的包）\n   - 搜索包：`conda search packageName`（搜索可用的包）\n\n3. 管理环境：\n\n   - 导出环境：`conda env export > environment.yml`（将当前环境的配置导出到YAML文件）\n   - 创建环境：`conda env create -f environment.yml`（使用YAML文件创建环境）\n   - 复制环境：`conda create --name myclone --clone myenv`（从一个环境克隆另一个环境）\n\n4. 其他常用命令：\n\n   - 查看已安装的环境：`conda info --envs`\n   - 查看已安装的包：`conda list`\n   - 查看可用的包更新：`conda update --all`\n   - 查看conda版本：`conda --version`\n\n在安装Anaconda后，您可以使用上述命令来管理环境、安装、更新和删除包，以及导入和导出环境配置。此外，您还可以使用`pip`命令来安装Python包，它也是Anaconda中的一部分。\n\n对于常用的安装包，可以根据您的需求和项目来决定。以下是一些常用的Anaconda包的示例：\n\n- NumPy：用于进行数值计算和科学计算的基础包。\n- Pandas：提供了数据分析和数据处理的功能，适用于处理结构化数据。\n- Matplotlib：用于绘制图形和数据可视化的库。\n- Scikit-learn：提供了各种机器学习算法和工具，适用于数据挖掘和机器学习任务。\n- TensorFlow：用于构建和训练深度学习模型的开源库。\n- PyTorch：另一个流行的用于深度学习的开源库。\n- Jupyter Notebook：用于创建交互式的数据分析和可视化文档的工具。\n- Django：用于构建Web应用程序的高级Python框架。\n\n这只是一小部分常用的包示例，Anaconda提供了\n\n大量的包供您选择和安装，可以根据您的具体需求来安装适合的包。\n\n在Linux中，可以使用Anaconda中的conda来管理Python环境和包，而不必直接使用pip。但是，如果您希望在Anaconda环境中使用pip，可以按照以下步骤进行操作：\n\n1. 激活Anaconda环境：在终端中运行以下命令来激活您的Anaconda环境（假设您的环境名称为\"myenv\"）：\n\n   ```\n   conda activate myenv\n   ```\n\n2. 安装pip：在激活的Anaconda环境中，使用conda命令安装pip。运行以下命令：\n\n   ```\n   conda install pip\n   ```\n\n3. 使用pip：一旦安装了pip，您可以使用pip命令来安装、升级和删除Python包，就像在普通的Python环境中一样。例如：\n\n   - 安装包：`pip install packageName`\n   - 升级包：`pip install --upgrade packageName`\n   - 删除包：`pip uninstall packageName`\n\n请注意，当您在Anaconda环境中使用pip时，安装的包将被放置在Anaconda环境的目录中，并与conda安装的包相互独立。这样可以避免与conda包管理系统的冲突。\n\n建议在Anaconda环境中优先使用conda来管理包，因为conda能够更好地处理依赖关系和环境兼容性。只有当您在Anaconda中找不到所需的包时，才建议使用pip进行安装。\n\n记得在完成操作后，您可以使用`conda deactivate`命令来停用Anaconda环境，或者关闭终端窗口来自动停用环境。\n\n --- writed by chatgpt\n\n","source":"_posts/linux安装Anaconda以及基本用法.md","raw":"---\ntitle: linux安装Anaconda以及基本用法\ndate: 2023-06-04 21:50:31\ntags: \n    - Anaconda\n    - linux\n    - python\n---\n\n要在Linux上安装Anaconda，您可以按照以下步骤进行操作：\n\n1. 下载Anaconda：首先，访问Anaconda官方网站（https://www.anaconda.com/products/individual）并下载适用于Linux的Anaconda安装包。请选择适合您系统的版本（如Python 3.7或Python 3.8）。\n\n2. 打开终端：打开终端应用程序，您可以在系统菜单中找到它。\n\n3. 切换到下载目录：使用`cd`命令切换到您下载Anaconda安装包的目录。例如，如果安装包在主目录的\"Downloads\"文件夹中，可以运行以下命令：\n\n   ```\n   cd ~/Downloads\n   ```\n\n4. 运行安装脚本：在终端中运行以下命令来执行安装脚本（请根据您下载的文件名进行替换）：\n\n   ```\n   bash Anaconda3-<版本号>-Linux-x86_64.sh\n   ```\n\n   注意：请确保将`<版本号>`替换为您下载的Anaconda版本的实际版本号。\n\n5. 阅读并接受许可协议：在安装过程中，您将被要求阅读并接受许可协议。请按照屏幕上的指示进行操作。\n\n6. 选择安装位置：接下来，您将被要求选择Anaconda的安装位置。默认情况下，它会安装在您的主目录下，但您可以选择其他位置。按照屏幕上的指示进行操作。\n\n7. 初始化Anaconda：安装完成后，您将被提示是否要初始化Anaconda。选择\"yes\"以使Anaconda生效并将其添加到您的Shell配置文件（例如，`.bashrc`）。这样，您就可以在终端中使用Anaconda了。\n\n8. 重新加载Shell配置文件：在完成初始化后，重新加载Shell配置文件，以便立即生效。您可以运行以下命令之一：\n\n   - 如果您使用的是bash Shell：\n\n     ```\n     source ~/.bashrc\n     ```\n\n   - 如果您使用的是zsh Shell：\n\n     ```\n     source ~/.zshrc\n     ```\n\n至此，Anaconda已成功安装在您的Linux系统上。您可以在终端中运行`conda`命令来管理和使用Anaconda环境、安装包等。\n\nAnaconda是一个功能强大的Python发行版，它提供了许多有用的命令和工具来管理Python环境和安装包。下面是一些常用的Anaconda命令以及一些有用的包管理命令：\n\n1. 创建和管理环境：\n\n   - 创建新环境：`conda create --name myenv`（\"myenv\"是环境名称，可以替换为您自己的名称）\n   - 激活环境：`conda activate myenv`\n   - 停用环境：`conda deactivate`\n   - 删除环境：`conda remove --name myenv --all`\n\n2. 管理包：\n\n   - 安装包：`conda install packageName`（\"packageName\"是要安装的包名称）\n   - 升级包：`conda update packageName`（更新指定的包到最新版本）\n   - 移除包：`conda remove packageName`（卸载指定的包）\n   - 搜索包：`conda search packageName`（搜索可用的包）\n\n3. 管理环境：\n\n   - 导出环境：`conda env export > environment.yml`（将当前环境的配置导出到YAML文件）\n   - 创建环境：`conda env create -f environment.yml`（使用YAML文件创建环境）\n   - 复制环境：`conda create --name myclone --clone myenv`（从一个环境克隆另一个环境）\n\n4. 其他常用命令：\n\n   - 查看已安装的环境：`conda info --envs`\n   - 查看已安装的包：`conda list`\n   - 查看可用的包更新：`conda update --all`\n   - 查看conda版本：`conda --version`\n\n在安装Anaconda后，您可以使用上述命令来管理环境、安装、更新和删除包，以及导入和导出环境配置。此外，您还可以使用`pip`命令来安装Python包，它也是Anaconda中的一部分。\n\n对于常用的安装包，可以根据您的需求和项目来决定。以下是一些常用的Anaconda包的示例：\n\n- NumPy：用于进行数值计算和科学计算的基础包。\n- Pandas：提供了数据分析和数据处理的功能，适用于处理结构化数据。\n- Matplotlib：用于绘制图形和数据可视化的库。\n- Scikit-learn：提供了各种机器学习算法和工具，适用于数据挖掘和机器学习任务。\n- TensorFlow：用于构建和训练深度学习模型的开源库。\n- PyTorch：另一个流行的用于深度学习的开源库。\n- Jupyter Notebook：用于创建交互式的数据分析和可视化文档的工具。\n- Django：用于构建Web应用程序的高级Python框架。\n\n这只是一小部分常用的包示例，Anaconda提供了\n\n大量的包供您选择和安装，可以根据您的具体需求来安装适合的包。\n\n在Linux中，可以使用Anaconda中的conda来管理Python环境和包，而不必直接使用pip。但是，如果您希望在Anaconda环境中使用pip，可以按照以下步骤进行操作：\n\n1. 激活Anaconda环境：在终端中运行以下命令来激活您的Anaconda环境（假设您的环境名称为\"myenv\"）：\n\n   ```\n   conda activate myenv\n   ```\n\n2. 安装pip：在激活的Anaconda环境中，使用conda命令安装pip。运行以下命令：\n\n   ```\n   conda install pip\n   ```\n\n3. 使用pip：一旦安装了pip，您可以使用pip命令来安装、升级和删除Python包，就像在普通的Python环境中一样。例如：\n\n   - 安装包：`pip install packageName`\n   - 升级包：`pip install --upgrade packageName`\n   - 删除包：`pip uninstall packageName`\n\n请注意，当您在Anaconda环境中使用pip时，安装的包将被放置在Anaconda环境的目录中，并与conda安装的包相互独立。这样可以避免与conda包管理系统的冲突。\n\n建议在Anaconda环境中优先使用conda来管理包，因为conda能够更好地处理依赖关系和环境兼容性。只有当您在Anaconda中找不到所需的包时，才建议使用pip进行安装。\n\n记得在完成操作后，您可以使用`conda deactivate`命令来停用Anaconda环境，或者关闭终端窗口来自动停用环境。\n\n --- writed by chatgpt\n\n","slug":"linux安装Anaconda以及基本用法","published":1,"updated":"2023-06-04T13:54:05.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clihjchhn0011vkeh8u367jge","content":"<p>要在Linux上安装Anaconda，您可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>下载Anaconda：首先，访问Anaconda官方网站（<a href=\"https://www.anaconda.com/products/individual%EF%BC%89%E5%B9%B6%E4%B8%8B%E8%BD%BD%E9%80%82%E7%94%A8%E4%BA%8ELinux%E7%9A%84Anaconda%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82%E8%AF%B7%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E6%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%88%E5%A6%82Python\">https://www.anaconda.com/products/individual）并下载适用于Linux的Anaconda安装包。请选择适合您系统的版本（如Python</a> 3.7或Python 3.8）。</p>\n</li>\n<li><p>打开终端：打开终端应用程序，您可以在系统菜单中找到它。</p>\n</li>\n<li><p>切换到下载目录：使用<code>cd</code>命令切换到您下载Anaconda安装包的目录。例如，如果安装包在主目录的”Downloads”文件夹中，可以运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Downloads</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>运行安装脚本：在终端中运行以下命令来执行安装脚本（请根据您下载的文件名进行替换）：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-&lt;版本号&gt;-Linux-x86_64.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意：请确保将<code>&lt;版本号&gt;</code>替换为您下载的Anaconda版本的实际版本号。</p>\n</li>\n<li><p>阅读并接受许可协议：在安装过程中，您将被要求阅读并接受许可协议。请按照屏幕上的指示进行操作。</p>\n</li>\n<li><p>选择安装位置：接下来，您将被要求选择Anaconda的安装位置。默认情况下，它会安装在您的主目录下，但您可以选择其他位置。按照屏幕上的指示进行操作。</p>\n</li>\n<li><p>初始化Anaconda：安装完成后，您将被提示是否要初始化Anaconda。选择”yes”以使Anaconda生效并将其添加到您的Shell配置文件（例如，<code>.bashrc</code>）。这样，您就可以在终端中使用Anaconda了。</p>\n</li>\n<li><p>重新加载Shell配置文件：在完成初始化后，重新加载Shell配置文件，以便立即生效。您可以运行以下命令之一：</p>\n<ul>\n<li><p>如果您使用的是bash Shell：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>如果您使用的是zsh Shell：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n</li>\n</ol>\n<p>至此，Anaconda已成功安装在您的Linux系统上。您可以在终端中运行<code>conda</code>命令来管理和使用Anaconda环境、安装包等。</p>\n<p>Anaconda是一个功能强大的Python发行版，它提供了许多有用的命令和工具来管理Python环境和安装包。下面是一些常用的Anaconda命令以及一些有用的包管理命令：</p>\n<ol>\n<li><p>创建和管理环境：</p>\n<ul>\n<li>创建新环境：<code>conda create --name myenv</code>（”myenv”是环境名称，可以替换为您自己的名称）</li>\n<li>激活环境：<code>conda activate myenv</code></li>\n<li>停用环境：<code>conda deactivate</code></li>\n<li>删除环境：<code>conda remove --name myenv --all</code></li>\n</ul>\n</li>\n<li><p>管理包：</p>\n<ul>\n<li>安装包：<code>conda install packageName</code>（”packageName”是要安装的包名称）</li>\n<li>升级包：<code>conda update packageName</code>（更新指定的包到最新版本）</li>\n<li>移除包：<code>conda remove packageName</code>（卸载指定的包）</li>\n<li>搜索包：<code>conda search packageName</code>（搜索可用的包）</li>\n</ul>\n</li>\n<li><p>管理环境：</p>\n<ul>\n<li>导出环境：<code>conda env export &gt; environment.yml</code>（将当前环境的配置导出到YAML文件）</li>\n<li>创建环境：<code>conda env create -f environment.yml</code>（使用YAML文件创建环境）</li>\n<li>复制环境：<code>conda create --name myclone --clone myenv</code>（从一个环境克隆另一个环境）</li>\n</ul>\n</li>\n<li><p>其他常用命令：</p>\n<ul>\n<li>查看已安装的环境：<code>conda info --envs</code></li>\n<li>查看已安装的包：<code>conda list</code></li>\n<li>查看可用的包更新：<code>conda update --all</code></li>\n<li>查看conda版本：<code>conda --version</code></li>\n</ul>\n</li>\n</ol>\n<p>在安装Anaconda后，您可以使用上述命令来管理环境、安装、更新和删除包，以及导入和导出环境配置。此外，您还可以使用<code>pip</code>命令来安装Python包，它也是Anaconda中的一部分。</p>\n<p>对于常用的安装包，可以根据您的需求和项目来决定。以下是一些常用的Anaconda包的示例：</p>\n<ul>\n<li>NumPy：用于进行数值计算和科学计算的基础包。</li>\n<li>Pandas：提供了数据分析和数据处理的功能，适用于处理结构化数据。</li>\n<li>Matplotlib：用于绘制图形和数据可视化的库。</li>\n<li>Scikit-learn：提供了各种机器学习算法和工具，适用于数据挖掘和机器学习任务。</li>\n<li>TensorFlow：用于构建和训练深度学习模型的开源库。</li>\n<li>PyTorch：另一个流行的用于深度学习的开源库。</li>\n<li>Jupyter Notebook：用于创建交互式的数据分析和可视化文档的工具。</li>\n<li>Django：用于构建Web应用程序的高级Python框架。</li>\n</ul>\n<p>这只是一小部分常用的包示例，Anaconda提供了</p>\n<p>大量的包供您选择和安装，可以根据您的具体需求来安装适合的包。</p>\n<p>在Linux中，可以使用Anaconda中的conda来管理Python环境和包，而不必直接使用pip。但是，如果您希望在Anaconda环境中使用pip，可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>激活Anaconda环境：在终端中运行以下命令来激活您的Anaconda环境（假设您的环境名称为”myenv”）：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate myenv</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>安装pip：在激活的Anaconda环境中，使用conda命令安装pip。运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pip</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>使用pip：一旦安装了pip，您可以使用pip命令来安装、升级和删除Python包，就像在普通的Python环境中一样。例如：</p>\n<ul>\n<li>安装包：<code>pip install packageName</code></li>\n<li>升级包：<code>pip install --upgrade packageName</code></li>\n<li>删除包：<code>pip uninstall packageName</code></li>\n</ul>\n</li>\n</ol>\n<p>请注意，当您在Anaconda环境中使用pip时，安装的包将被放置在Anaconda环境的目录中，并与conda安装的包相互独立。这样可以避免与conda包管理系统的冲突。</p>\n<p>建议在Anaconda环境中优先使用conda来管理包，因为conda能够更好地处理依赖关系和环境兼容性。只有当您在Anaconda中找不到所需的包时，才建议使用pip进行安装。</p>\n<p>记得在完成操作后，您可以使用<code>conda deactivate</code>命令来停用Anaconda环境，或者关闭终端窗口来自动停用环境。</p>\n<p> — writed by chatgpt</p>\n","site":{"data":{}},"excerpt":"","more":"<p>要在Linux上安装Anaconda，您可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>下载Anaconda：首先，访问Anaconda官方网站（<a href=\"https://www.anaconda.com/products/individual%EF%BC%89%E5%B9%B6%E4%B8%8B%E8%BD%BD%E9%80%82%E7%94%A8%E4%BA%8ELinux%E7%9A%84Anaconda%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82%E8%AF%B7%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E6%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%88%E5%A6%82Python\">https://www.anaconda.com/products/individual）并下载适用于Linux的Anaconda安装包。请选择适合您系统的版本（如Python</a> 3.7或Python 3.8）。</p>\n</li>\n<li><p>打开终端：打开终端应用程序，您可以在系统菜单中找到它。</p>\n</li>\n<li><p>切换到下载目录：使用<code>cd</code>命令切换到您下载Anaconda安装包的目录。例如，如果安装包在主目录的”Downloads”文件夹中，可以运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/Downloads</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行安装脚本：在终端中运行以下命令来执行安装脚本（请根据您下载的文件名进行替换）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-&lt;版本号&gt;-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>注意：请确保将<code>&lt;版本号&gt;</code>替换为您下载的Anaconda版本的实际版本号。</p>\n</li>\n<li><p>阅读并接受许可协议：在安装过程中，您将被要求阅读并接受许可协议。请按照屏幕上的指示进行操作。</p>\n</li>\n<li><p>选择安装位置：接下来，您将被要求选择Anaconda的安装位置。默认情况下，它会安装在您的主目录下，但您可以选择其他位置。按照屏幕上的指示进行操作。</p>\n</li>\n<li><p>初始化Anaconda：安装完成后，您将被提示是否要初始化Anaconda。选择”yes”以使Anaconda生效并将其添加到您的Shell配置文件（例如，<code>.bashrc</code>）。这样，您就可以在终端中使用Anaconda了。</p>\n</li>\n<li><p>重新加载Shell配置文件：在完成初始化后，重新加载Shell配置文件，以便立即生效。您可以运行以下命令之一：</p>\n<ul>\n<li><p>如果您使用的是bash Shell：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果您使用的是zsh Shell：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<p>至此，Anaconda已成功安装在您的Linux系统上。您可以在终端中运行<code>conda</code>命令来管理和使用Anaconda环境、安装包等。</p>\n<p>Anaconda是一个功能强大的Python发行版，它提供了许多有用的命令和工具来管理Python环境和安装包。下面是一些常用的Anaconda命令以及一些有用的包管理命令：</p>\n<ol>\n<li><p>创建和管理环境：</p>\n<ul>\n<li>创建新环境：<code>conda create --name myenv</code>（”myenv”是环境名称，可以替换为您自己的名称）</li>\n<li>激活环境：<code>conda activate myenv</code></li>\n<li>停用环境：<code>conda deactivate</code></li>\n<li>删除环境：<code>conda remove --name myenv --all</code></li>\n</ul>\n</li>\n<li><p>管理包：</p>\n<ul>\n<li>安装包：<code>conda install packageName</code>（”packageName”是要安装的包名称）</li>\n<li>升级包：<code>conda update packageName</code>（更新指定的包到最新版本）</li>\n<li>移除包：<code>conda remove packageName</code>（卸载指定的包）</li>\n<li>搜索包：<code>conda search packageName</code>（搜索可用的包）</li>\n</ul>\n</li>\n<li><p>管理环境：</p>\n<ul>\n<li>导出环境：<code>conda env export &gt; environment.yml</code>（将当前环境的配置导出到YAML文件）</li>\n<li>创建环境：<code>conda env create -f environment.yml</code>（使用YAML文件创建环境）</li>\n<li>复制环境：<code>conda create --name myclone --clone myenv</code>（从一个环境克隆另一个环境）</li>\n</ul>\n</li>\n<li><p>其他常用命令：</p>\n<ul>\n<li>查看已安装的环境：<code>conda info --envs</code></li>\n<li>查看已安装的包：<code>conda list</code></li>\n<li>查看可用的包更新：<code>conda update --all</code></li>\n<li>查看conda版本：<code>conda --version</code></li>\n</ul>\n</li>\n</ol>\n<p>在安装Anaconda后，您可以使用上述命令来管理环境、安装、更新和删除包，以及导入和导出环境配置。此外，您还可以使用<code>pip</code>命令来安装Python包，它也是Anaconda中的一部分。</p>\n<p>对于常用的安装包，可以根据您的需求和项目来决定。以下是一些常用的Anaconda包的示例：</p>\n<ul>\n<li>NumPy：用于进行数值计算和科学计算的基础包。</li>\n<li>Pandas：提供了数据分析和数据处理的功能，适用于处理结构化数据。</li>\n<li>Matplotlib：用于绘制图形和数据可视化的库。</li>\n<li>Scikit-learn：提供了各种机器学习算法和工具，适用于数据挖掘和机器学习任务。</li>\n<li>TensorFlow：用于构建和训练深度学习模型的开源库。</li>\n<li>PyTorch：另一个流行的用于深度学习的开源库。</li>\n<li>Jupyter Notebook：用于创建交互式的数据分析和可视化文档的工具。</li>\n<li>Django：用于构建Web应用程序的高级Python框架。</li>\n</ul>\n<p>这只是一小部分常用的包示例，Anaconda提供了</p>\n<p>大量的包供您选择和安装，可以根据您的具体需求来安装适合的包。</p>\n<p>在Linux中，可以使用Anaconda中的conda来管理Python环境和包，而不必直接使用pip。但是，如果您希望在Anaconda环境中使用pip，可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>激活Anaconda环境：在终端中运行以下命令来激活您的Anaconda环境（假设您的环境名称为”myenv”）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate myenv</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装pip：在激活的Anaconda环境中，使用conda命令安装pip。运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用pip：一旦安装了pip，您可以使用pip命令来安装、升级和删除Python包，就像在普通的Python环境中一样。例如：</p>\n<ul>\n<li>安装包：<code>pip install packageName</code></li>\n<li>升级包：<code>pip install --upgrade packageName</code></li>\n<li>删除包：<code>pip uninstall packageName</code></li>\n</ul>\n</li>\n</ol>\n<p>请注意，当您在Anaconda环境中使用pip时，安装的包将被放置在Anaconda环境的目录中，并与conda安装的包相互独立。这样可以避免与conda包管理系统的冲突。</p>\n<p>建议在Anaconda环境中优先使用conda来管理包，因为conda能够更好地处理依赖关系和环境兼容性。只有当您在Anaconda中找不到所需的包时，才建议使用pip进行安装。</p>\n<p>记得在完成操作后，您可以使用<code>conda deactivate</code>命令来停用Anaconda环境，或者关闭终端窗口来自动停用环境。</p>\n<p> — writed by chatgpt</p>\n"},{"title":"git clang-format","date":"2023-06-18T14:56:00.000Z","_content":"\n### 1. why use clang-format?\n1. important to raise the code quality\n2.  formatting your code is important is that you get a uniformed code when reading it, meaning you will decrease the “WTF per minute”-score*.\n\n### install\n1. clang-format\n    ```\n     sudo apt-get install clang-format\n    ```\n\n2. config .clang-format\n    ```\n    cd <path to repo>    \n    clang-format -style=llvm -dump-config > .clang-format\n    ```\n    also you can choose another style or custom your style by changing *.clang-format*.\n\n### how to use\nafter editing the code. do it as follows:\n    ```\n    git add -u\n    git clang-format\n    ```\nThe clang-format will format the staged code, you can use <font color=red> git diff </font> to check whether the clang-format is work.\n\n","source":"_posts/git-clang-format.md","raw":"---\ntitle: git clang-format\ndate: 2023-06-18 22:56:00\ntags:\n    - git\n    - clang-format\n---\n\n### 1. why use clang-format?\n1. important to raise the code quality\n2.  formatting your code is important is that you get a uniformed code when reading it, meaning you will decrease the “WTF per minute”-score*.\n\n### install\n1. clang-format\n    ```\n     sudo apt-get install clang-format\n    ```\n\n2. config .clang-format\n    ```\n    cd <path to repo>    \n    clang-format -style=llvm -dump-config > .clang-format\n    ```\n    also you can choose another style or custom your style by changing *.clang-format*.\n\n### how to use\nafter editing the code. do it as follows:\n    ```\n    git add -u\n    git clang-format\n    ```\nThe clang-format will format the staged code, you can use <font color=red> git diff </font> to check whether the clang-format is work.\n\n","slug":"git-clang-format","published":1,"updated":"2023-06-18T15:13:29.344Z","_id":"clj1k9ty90000ioeha45ch4y6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-why-use-clang-format\"><a href=\"#1-why-use-clang-format\" class=\"headerlink\" title=\"1. why use clang-format?\"></a>1. why use clang-format?</h3><ol>\n<li>important to raise the code quality</li>\n<li>formatting your code is important is that you get a uniformed code when reading it, meaning you will decrease the “WTF per minute”-score*.</li>\n</ol>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><ol>\n<li><p>clang-format</p>\n <figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install clang-format</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>config .clang-format</p>\n <figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;path to repo&gt;    </span><br><span class=\"line\">clang-format -style=llvm -dump-config &gt; .clang-format</span><br></pre></td></tr></tbody></table></figure>\n<p> also you can choose another style or custom your style by changing <em>.clang-format</em>.</p>\n</li>\n</ol>\n<h3 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h3><p>after editing the code. do it as follows:<br>    </p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -u</span><br><span class=\"line\">git clang-format</span><br></pre></td></tr></tbody></table></figure><br>The clang-format will format the staged code, you can use <font color=\"red\"> git diff </font> to check whether the clang-format is work.<p></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-why-use-clang-format\"><a href=\"#1-why-use-clang-format\" class=\"headerlink\" title=\"1. why use clang-format?\"></a>1. why use clang-format?</h3><ol>\n<li>important to raise the code quality</li>\n<li>formatting your code is important is that you get a uniformed code when reading it, meaning you will decrease the “WTF per minute”-score*.</li>\n</ol>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><ol>\n<li><p>clang-format</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install clang-format</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>config .clang-format</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;path to repo&gt;    </span><br><span class=\"line\">clang-format -style=llvm -dump-config &gt; .clang-format</span><br></pre></td></tr></table></figure>\n<p> also you can choose another style or custom your style by changing <em>.clang-format</em>.</p>\n</li>\n</ol>\n<h3 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h3><p>after editing the code. do it as follows:<br>    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -u</span><br><span class=\"line\">git clang-format</span><br></pre></td></tr></table></figure><br>The clang-format will format the staged code, you can use <font color=red> git diff </font> to check whether the clang-format is work.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clihjchgz0001vkeh227j55od","tag_id":"clihjchh30003vkeh1yt86khk","_id":"clihjchh80008vkeh9w2s8eu0"},{"post_id":"clihjchh20002vkeh49du3m1j","tag_id":"clihjchh80007vkehg8jr305i","_id":"clihjchhg000gvkehbk38cl85"},{"post_id":"clihjchh20002vkeh49du3m1j","tag_id":"clihjchhb000bvkeh9y9tfpln","_id":"clihjchhg000hvkehh4gret8c"},{"post_id":"clihjchh50004vkeh2d8u73bd","tag_id":"clihjchhf000evkehbzt4cwk5","_id":"clihjchhh000jvkeh1nki0490"},{"post_id":"clihjchh60005vkeh4y5y45mt","tag_id":"clihjchhg000ivkeh1g8h2q0j","_id":"clihjchhi000mvkeh7udv7c8z"},{"post_id":"clihjchh60005vkeh4y5y45mt","tag_id":"clihjchhh000kvkehc8k40ffd","_id":"clihjchhi000nvkehex9m1m1s"},{"post_id":"clihjchh70006vkeh5vi3cv03","tag_id":"clihjchhi000lvkeh3rba7zva","_id":"clihjchhj000pvkehf8460iv3"},{"post_id":"clihjchh80009vkehds5r50uv","tag_id":"clihjchhf000evkehbzt4cwk5","_id":"clihjchhk000rvkehag3zdo61"},{"post_id":"clihjchhc000cvkeh4f7293wd","tag_id":"clihjchhk000qvkeh0wc38azb","_id":"clihjchhl000vvkehadxx37dt"},{"post_id":"clihjchhc000cvkeh4f7293wd","tag_id":"clihjchhk000svkehce5abx57","_id":"clihjchhm000wvkeh8iio6u50"},{"post_id":"clihjchhc000cvkeh4f7293wd","tag_id":"clihjchhi000lvkeh3rba7zva","_id":"clihjchhm000xvkeh379u6amb"},{"post_id":"clihjchhd000dvkeh1z1s86q6","tag_id":"clihjchh80007vkehg8jr305i","_id":"clihjchhm000yvkehd2bc8zu8"},{"post_id":"clihjchhd000dvkeh1z1s86q6","tag_id":"clihjchhb000bvkeh9y9tfpln","_id":"clihjchhm000zvkehhmbdgmbz"},{"post_id":"clihjchhd000dvkeh1z1s86q6","tag_id":"clihjchhl000uvkehffus334o","_id":"clihjchhm0010vkehgreids9f"},{"post_id":"clihjchhn0011vkeh8u367jge","tag_id":"clihjchhn0012vkehgg1b2vrk","_id":"clihjchhr0014vkeh1otvfxpg"},{"post_id":"clihjchhn0011vkeh8u367jge","tag_id":"clihjchhk000qvkeh0wc38azb","_id":"clihjchhr0015vkehd5m0d152"},{"post_id":"clihjchhn0011vkeh8u367jge","tag_id":"clihjchho0013vkehhfsra4zx","_id":"clihjchhr0016vkeh0d48a4a7"},{"post_id":"clj1k9ty90000ioeha45ch4y6","tag_id":"clihjchhf000evkehbzt4cwk5","_id":"clj1k9tym0002ioehdyk20gfm"},{"post_id":"clj1k9ty90000ioeha45ch4y6","tag_id":"clj1k9tyg0001ioehc0b9ea6x","_id":"clj1k9tym0003ioehaz68d8o4"}],"Tag":[{"name":"shell","_id":"clihjchh30003vkeh1yt86khk"},{"name":"interview","_id":"clihjchh80007vkehg8jr305i"},{"name":"c/c++","_id":"clihjchhb000bvkeh9y9tfpln"},{"name":"git","_id":"clihjchhf000evkehbzt4cwk5"},{"name":"Neovim","_id":"clihjchhg000ivkeh1g8h2q0j"},{"name":"vim","_id":"clihjchhh000kvkehc8k40ffd"},{"name":"github","_id":"clihjchhi000lvkeh3rba7zva"},{"name":"linux","_id":"clihjchhk000qvkeh0wc38azb"},{"name":"hexo","_id":"clihjchhk000svkehce5abx57"},{"name":"LLVM","_id":"clihjchhl000uvkehffus334o"},{"name":"Anaconda","_id":"clihjchhn0012vkehgg1b2vrk"},{"name":"python","_id":"clihjchho0013vkehhfsra4zx"},{"name":"clang-format","_id":"clj1k9tyg0001ioehc0b9ea6x"}]}}