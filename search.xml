<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>github: 问题收集</title>
      <link href="/2023/06/04/github-%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
      <url>/2023/06/04/github-%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<ol><li>Recv failure: Connection reset by peer<br>Firstly try this. <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neovim: 安装与配置</title>
      <link href="/2023/06/04/Neovim-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/06/04/Neovim-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>安装和配置Neovim（nvim）包括两个主要步骤：安装Neovim本身和进行基本配置。以下是安装和配置Neovim的一般步骤：</p><ol><li><p>安装Neovim：</p><ul><li>在Linux上，您可以使用包管理器（如apt、dnf、pacman等）进行安装。例如，在Ubuntu上，可以运行以下命令：<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install neovim</span><br></pre></td></tr></tbody></table></figure></li><li>在macOS上，您可以使用Homebrew进行安装。运行以下命令：<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install neovim</span><br></pre></td></tr></tbody></table></figure></li><li>在Windows上，您可以从Neovim的官方网站（<a href="https://neovim.io/%EF%BC%89%E4%B8%8B%E8%BD%BD%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82">https://neovim.io/）下载预编译的安装程序并进行安装。</a></li></ul></li><li><p>基本配置：</p><ul><li>打开终端或命令提示符，并运行以下命令创建配置文件：<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.config/nvim</span><br><span class="line">touch ~/.config/nvim/init.vim</span><br></pre></td></tr></tbody></table></figure></li><li>使用您喜欢的文本编辑器（如Vim、Neovim自带的nvim）打开<code>~/.config/nvim/init.vim</code>文件，并添加您的配置设置。以下是一个基本配置示例：<figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 启用行号显示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 启用语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="comment">" 设置tab宽度为4个空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br></pre></td></tr></tbody></table></figure></li><li>保存并关闭文件。</li></ul></li><li><p>启动Neovim：</p><ul><li>在终端或命令提示符中运行以下命令启动Neovim：<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim</span><br></pre></td></tr></tbody></table></figure></li><li>Neovim将读取配置文件，并根据您的设置进行初始化。</li></ul></li><li><p>进一步配置：</p><ul><li>您可以根据个人需求进一步定制和配置Neovim。例如，您可以选择安装插件管理器（如vim-plug、dein.vim）来管理插件，配置自动补全、主题、快捷键映射等。</li></ul></li></ol><p>请记住，Neovim具有丰富的配置选项和功能，您可以根据自己的需求进行定制和扩展。官方文档（<a href="https://neovim.io/doc/user/%EF%BC%89%E6%98%AF%E4%BA%86%E8%A7%A3%E6%9B%B4%E5%A4%9ANeovim%E5%8A%9F%E8%83%BD%E5%92%8C%E9%85%8D%E7%BD%AE%E7%9A%84%E7%BB%9D%E4%BD%B3%E8%B5%84%E6%BA%90%E3%80%82">https://neovim.io/doc/user/）是了解更多Neovim功能和配置的绝佳资源。</a></p><p>下面是一个简单的示例，展示了Neovim的基本配置：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 设置行号显示</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 启用语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="comment">" 设置配色方案</span></span><br><span class="line"><span class="keyword">colorscheme</span> gruvbox</span><br><span class="line"></span><br><span class="line"><span class="comment">" 设置自动缩进</span></span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment">" 启用文件类型检测</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 设置tab宽度为4个空格</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">" 启用鼠标支持</span></span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 设置搜索时忽略大小写</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"><span class="comment">" 启用增量搜索</span></span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">" 设置快捷键映射</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">w</span> :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>q :q<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 自动关闭括号匹配</span></span><br><span class="line"><span class="keyword">autocmd</span> FileType <span class="keyword">ruby</span>,<span class="keyword">python</span>,<span class="keyword">perl</span>,php,javascript,<span class="keyword">vim</span>,jinja,html,xml,yaml,yml <span class="keyword">autocmd</span> BufEnter * silent! %s/\s\+$//<span class="keyword">e</span> | <span class="keyword">syntax</span> <span class="keyword">sync</span> fromstart</span><br><span class="line"></span><br><span class="line"><span class="comment">" 启用插件管理器</span></span><br><span class="line"><span class="comment">" 以下是使用vim-plug插件管理器的示例配置</span></span><br><span class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.vim/plugged'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">" 插件列表</span></span><br><span class="line"><span class="comment">" 插件1: NERDTree 文件资源管理器</span></span><br><span class="line">Plug <span class="string">'preservim/nerdtree'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 插件2: coc.nvim 自动补全和语言服务器支持</span></span><br><span class="line">Plug <span class="string">'neoclide/coc.nvim'</span>, {<span class="string">'branch'</span>: <span class="string">'release'</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">" 插件3: vim-commentary 注释插件</span></span><br><span class="line">Plug <span class="string">'tpope/vim-commentary'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 结束插件列表</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></tbody></table></figure><p>以上示例展示了一些常用的配置选项和插件，包括行号显示、语法高亮、配色方案、自动缩进、文件类型检测、快捷键映射等。同时，示例中使用了vim-plug插件管理器来管理插件的安装和加载。</p><p>请注意，这只是一个基本的示例配置，您可以根据自己的需求进行修改和扩展。同时，根据您使用的插件管理器和具体插件的要求，可能需要进行额外的设置和依赖项安装。</p><p>您可以将以上配置保存为<code>~/.config/nvim/init.vim</code>文件（如果该文件夹和文件不存在，则需要手动创建），Neovim将在启动时加载该配置文件，并应用相应的设置和插件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Neovim </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github: workflow</title>
      <link href="/2023/06/04/github-workflow/"/>
      <url>/2023/06/04/github-workflow/</url>
      
        <content type="html"><![CDATA[<p>要在GitHub Actions中执行测试脚本，您可以按照以下步骤进行操作：</p><ol><li><p>在您的代码库中创建一个名为<code>.github/workflows</code>的目录（如果该目录不存在）。</p></li><li><p>在<code>.github/workflows</code>目录中创建一个新的YAML文件，用于定义工作流程。您可以根据需要将该文件命名为<code>test.yml</code>或其他适当的名称。</p></li><li><p>在<code>test.yml</code>文件中编写工作流程的定义。以下是一个示例的基本配置：</p></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="number">3.</span><span class="string">x</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.txt</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 运行您的测试脚本的命令</span></span><br><span class="line"><span class="string">          python test_script.py</span></span><br></pre></td></tr></tbody></table></figure><p>在上述示例中，工作流程在<code>main</code>分支的推送和拉取请求事件时触发。它定义了一个名为<code>test</code>的作业，该作业在最新版本的Ubuntu操作系统上运行。作业包含一系列步骤，例如检出代码、设置Python环境、安装依赖项和运行测试脚本。</p><p>在示例中的最后一个步骤中，使用<code>run</code>关键字来执行测试脚本的命令。您需要根据实际情况调整该命令，确保它与您的项目和测试脚本的要求一致。</p><ol start="4"><li><p>将<code>test.yml</code>文件推送到代码库的<code>.github/workflows</code>目录中。</p></li><li><p>在GitHub上打开您的代码库，导航到“Actions”选项卡，您将看到您的工作流程正在运行。您可以查看工作流程的执行状态、日志和输出。</p></li><li><p>每当有新的代码推送到<code>main</code>分支时，GitHub将自动运行工作流程，并执行定义的测试脚本。</p></li></ol><p>通过这样的设置，您可以确保在每次代码更改时自动运行测试脚本，并及时获取测试结果和反馈。请根据您的项目和需求进行自定义和调整。</p><hr><p><font size="8"> writed by chatgpt </font></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pre-commit</title>
      <link href="/2023/06/04/git-pre-commit/"/>
      <url>/2023/06/04/git-pre-commit/</url>
      
        <content type="html"><![CDATA[<p>要在Git中设置pre-commit钩子并使用clang-format进行代码格式化和设置代码风格，您可以按照以下步骤进行操作：</p><ol><li><p>安装clang-format：确保您的系统上已安装clang-format。您可以根据您的操作系统选择适当的方法进行安装。</p></li><li><p>导航到您的Git项目的根目录。</p></li><li><p>进入<code>.git/hooks/</code>目录：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .git/hooks/</span><br></pre></td></tr></tbody></table></figure></li><li><p>检查是否已存在<code>pre-commit</code>文件。如果存在，可以备份或删除该文件。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls pre-commit</span><br></pre></td></tr></tbody></table></figure><p>如果输出显示<code>pre-commit</code>文件，则可以备份或删除它。</p></li><li><p>创建一个新的<code>pre-commit</code>文件并编辑：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch pre-commit</span><br><span class="line">chmod +x pre-commit</span><br><span class="line">vim pre-commit</span><br></pre></td></tr></tbody></table></figure><p>这将创建一个名为<code>pre-commit</code>的空文件，并赋予它执行权限。使用适合您的文本编辑器打开文件。</p></li><li><p>在<code>pre-commit</code>文件中，添加以下脚本逻辑：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义clang-format的配置文件路径</span></span><br><span class="line">CONFIG_FILE=<span class="string">".clang-format"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取即将提交的C/C++源文件列表</span></span><br><span class="line">files=$(git diff --cached --name-only --diff-filter=ACM <span class="string">"*.c"</span> <span class="string">"*.cpp"</span> <span class="string">"*.h"</span> <span class="string">"*.hpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行代码规范检查命令，例如使用clang-format进行检查</span></span><br><span class="line"><span class="comment"># 检查命令将输出不符合规范的文件列表</span></span><br><span class="line">CHECK_RESULT=$(clang-format -style=llvm --dry-run --Werror $(git diff --cached --name-only))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否存在不符合规范的文件</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$CHECK_RESULT</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"Code style violation:"</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"<span class="variable">$CHECK_RESULT</span>"</span></span><br><span class="line">     <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否存在要格式化的文件</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$files</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Running clang-format..."</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逐个格式化文件</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$files</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 使用clang-format进行代码格式化，并覆盖原始文件</span></span><br><span class="line">        clang-format -style=file -i <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line">        git add <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></tbody></table></figure><p>在示例中，我们使用了<code>git diff</code>命令来获取即将提交的C/C++源文件（扩展名为.c、.cpp、.h和.hpp）。然后，我们使用<code>clang-format</code>对这些文件进行格式化，并使用<code>git add</code>将格式化后的文件添加到暂存区。</p><p>请注意，我们使用了<code>.clang-format</code>作为clang-format的配置文件。您可以根据需要在项目中创建并配置该文件，以定义您所需的代码风格。<br> 如果我们要使用llvm的风格，可以使用**-style=llvm**。</p></li><li><p>保存并关闭文件。</p></li></ol><p>现在，当您执行<code>git commit</code>命令提交代码时，Git将自动运行<code>.git/hooks/pre-commit</code>脚本，并使用clang-format对即将提交的C/C++源文件进行代码格式化，并根据<code>.clang-format</code>配置文件设置代码风格。</p><p>请确保脚本中的命令与您的开发环境和项目要求相匹配，并根据需要进行自定义。</p><p>注意：如果您的项目中包含其他类型的源文件，如C源文件(.c)或C++源文件(.cxx)，请根据需要修改文件类型的匹配模式，并相应地更新<code>git diff</code>命令中的参数。同样，根据需要进行适当的配置文件调整。</p><p><font color="red"> writed by chatgpt </font> </p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo备份迁移</title>
      <link href="/2023/06/04/hexo%E5%A4%87%E4%BB%BD%E8%BF%81%E7%A7%BB/"/>
      <url>/2023/06/04/hexo%E5%A4%87%E4%BB%BD%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>hexo 部署到github 之后，如何进行进行迁移备份？</p><h3 id="1-备份分支"><a href="#1-备份分支" class="headerlink" title="1. 备份分支"></a>1. 备份分支</h3><p>备份文件的分支和部署的分支要分开，比如这里我选择main 分支作为备份文件的分支，选择master作为部署分支。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ✗ echo `git branch`</span><br><span class="line">* main master</span><br></pre></td></tr></tbody></table></figure><h3 id="2-新机器拉取拉取分支"><a href="#2-新机器拉取拉取分支" class="headerlink" title="2. 新机器拉取拉取分支"></a>2. 新机器拉取拉取分支</h3><ol><li>新的机器首先配置hexo 所需环境，安装必须的 nodejs、npm、hexo，建议直接下载node的二进制压缩包，然后直接解压，设置软连接。</li></ol> <figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.下载地址</span></span><br><span class="line">https://nodejs.org/en/download/releases</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2. 设置软连接</span></span><br><span class="line"><span class="built_in">ln</span> -s &lt;解压文件&gt;/some path/node /usr/local/bin/node</span><br><span class="line"><span class="built_in">ln</span> -s &lt;解压文件&gt;/some path/npm /usr/local/bin/npm</span><br><span class="line"><span class="built_in">ln</span> -s &lt;解压文件&gt;/some path/hexo /usr/local/bin/hexo</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>拉取分支</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone htpps://.....git  &lt;somepath&gt;</span><br><span class="line">cd &lt;somepath&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><h3 id="3-Other"><a href="#3-Other" class="headerlink" title="3.  Other"></a>3.  Other</h3><ol><li><p>hexo主题不匹配导致无法生成静态文件 *.html，此时可以将主题设置成默认的landscape，查看是否是主题问题。</p></li><li><p>github权限问题，除了配置ssh 密钥外，还要设置token。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装zsh</title>
      <link href="/2023/06/04/zsh/"/>
      <url>/2023/06/04/zsh/</url>
      
        <content type="html"><![CDATA[<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></tbody></table></figure><h4 id="切换zsh"><a href="#切换zsh" class="headerlink" title="切换zsh"></a>切换zsh</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></tbody></table></figure><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></tbody></table></figure><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></tbody></table></figure><h4 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 拷贝一个模板配置</span></span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 下载两个插件试试</span></span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加到~/.zshrc 中</span></span></span><br><span class="line">plugins=(git</span><br><span class="line">        zsh-autosuggestions</span><br><span class="line">        zsh-syntax-highlighting</span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="使之生效"><a href="#使之生效" class="headerlink" title="使之生效"></a>使之生效</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AutoBuild</title>
      <link href="/2023/05/30/AutoBuild/"/>
      <url>/2023/05/30/AutoBuild/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux文本操作</title>
      <link href="/2022/11/16/Linux%E6%96%87%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/11/16/Linux%E6%96%87%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ol><li><p>把src.txt 的文本追加到dst.txt 后面</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat src.txt &gt;&gt; dst.txt</span><br></pre></td></tr></tbody></table></figure></li><li><p>linux 单线程所能支持的最大文件处理数量</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/fs/file-max</span><br></pre></td></tr></tbody></table></figure><p>设置:例如设置成8192</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 8192 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/15/hello-world/"/>
      <url>/2022/11/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++关键字总结</title>
      <link href="/2022/11/15/Cplusplus%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2022/11/15/Cplusplus%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h3 id="mutable-与-const"><a href="#mutable-与-const" class="headerlink" title="mutable 与 const"></a>mutable 与 const</h3><p>mutable的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。</p><p>1、const所修饰的函数中，要有编译器负责保护类中的成员函数不被修改；而相对地，mutable则是用来修饰类的成员变量的，让该变量在const修饰的常成员函数中可以被修改</p><p>2、const修饰的函数只能是类的成员函数(保护this指针不被恶意修改)；mutable修饰的变量只能是类的成员变量。</p><p>3、在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const修饰的常成员函数中。</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p> private可以保护不被类的成员不被外界调用，析构函数通常情况是public的，这样外部调用的时候可以用于<br> 释放内存，如果一个析构函数被private修饰，那么会出现编译报错，因为编译器不能调用被private保护的析构函数。  </p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>[1] <a href="https://blog.csdn.net/weixin_42067873/article/details/96107750">https://blog.csdn.net/weixin_42067873/article/details/96107750</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Q&amp;A</title>
      <link href="/2022/11/09/interview/"/>
      <url>/2022/11/09/interview/</url>
      
        <content type="html"><![CDATA[<h1 id="Interview-问题收集"><a href="#Interview-问题收集" class="headerlink" title="Interview 问题收集"></a>Interview 问题收集</h1><h6 id="memcopy-与-memmove谁更安全？"><a href="#memcopy-与-memmove谁更安全？" class="headerlink" title="memcopy 与 memmove谁更安全？"></a>memcopy 与 memmove谁更安全？</h6><p>memmove 更安全，memove 可以正确处理地址重叠的部分。</p><h6 id="const-与-define-在定义常量的区别？"><a href="#const-与-define-在定义常量的区别？" class="headerlink" title="const 与 define 在定义常量的区别？"></a>const 与 define 在定义常量的区别？</h6><p>const 申明的常量会进行类型检查，define只是替换，不做类型检查。</p><h6 id="static-关键字的作用？"><a href="#static-关键字的作用？" class="headerlink" title="static 关键字的作用？"></a>static 关键字的作用？</h6><p>static申明的类变量属于类，不属于某个对象，是所有类共享。</p><h6 id="Cache和主存内存一致性"><a href="#Cache和主存内存一致性" class="headerlink" title="Cache和主存内存一致性"></a>Cache和主存内存一致性</h6><ol><li>write-through 写操作是数据写入cache又写入内存。</li><li>write-back 写操作只是在数据被踢出cache时才写入内存。</li></ol><h6 id="指令调度的基本流程"><a href="#指令调度的基本流程" class="headerlink" title="指令调度的基本流程"></a>指令调度的基本流程</h6><ol><li>构建DAG图，对DAG图进行处理</li><li>初始化，包括调度策略，DAG图，调度器队列；</li><li>选取节点进行调度，pickNode方法在自定义调度策略中被重写，GenericScheduler::pickNode（）获取RegionPolicy中设置的次序&gt;进行遍历，pickNode方法返回一个SUnit（Scheduling unit），这是调度图中的一个节点表示，包含节点的一系列属性和状态，譬如isPending，isAvailable，isScheduled等用于记录节点状态的信息；调试时可以通过SUnit.getInstr()-&gt;dump()打印出节点中指令的信息。</li><li>scheduleMI，移动指令和更新寄存器压力信息</li><li>更新调度状态，将SU-&gt;isScheduled 设为 true。</li></ol><h6 id="std-cout-与-std-cerr-的区别"><a href="#std-cout-与-std-cerr-的区别" class="headerlink" title="std::cout 与 std::cerr 的区别?"></a>std::cout 与 std::cerr 的区别?</h6><p>​std::cerr不需要被发送缓冲区，可以直接显示输出，std::cout 为了减少刷屏的次数，设置了缓冲区，这样在遇到std::endl 或者”\n”&gt;时会调用os.flush把缓冲区内容输出到显示器上进行显示。</p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> c/c++ </tag>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
