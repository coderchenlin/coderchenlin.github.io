<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ubuntu安装zsh</title>
      <link href="/2023/06/04/zsh/"/>
      <url>/2023/06/04/zsh/</url>
      
        <content type="html"><![CDATA[<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></tbody></table></figure><h4 id="切换zsh"><a href="#切换zsh" class="headerlink" title="切换zsh"></a>切换zsh</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></tbody></table></figure><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></tbody></table></figure><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br></pre></td></tr></tbody></table></figure><h4 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 拷贝一个模板配置</span></span></span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 下载两个插件试试</span></span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions.git ~/.oh-my-zsh/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加到~/.zshrc 中</span></span></span><br><span class="line">plugins=(git</span><br><span class="line">        zsh-autosuggestions</span><br><span class="line">        zsh-syntax-highlighting</span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="使之生效"><a href="#使之生效" class="headerlink" title="使之生效"></a>使之生效</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AutoBuild</title>
      <link href="/2023/05/30/AutoBuild/"/>
      <url>/2023/05/30/AutoBuild/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux文本操作</title>
      <link href="/2022/11/16/Linux%E6%96%87%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/11/16/Linux%E6%96%87%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ol><li><p>把src.txt 的文本追加到dst.txt 后面</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat src.txt &gt;&gt; dst.txt</span><br></pre></td></tr></tbody></table></figure></li><li><p>linux 单线程所能支持的最大文件处理数量</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/fs/file-max</span><br></pre></td></tr></tbody></table></figure><p>设置:例如设置成8192</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 8192 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/15/hello-world/"/>
      <url>/2022/11/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++关键字总结</title>
      <link href="/2022/11/15/Cplusplus%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2022/11/15/Cplusplus%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h3 id="mutable-与-const"><a href="#mutable-与-const" class="headerlink" title="mutable 与 const"></a>mutable 与 const</h3><p>mutable的中文意思是“可变的，易变的”，跟constant（既C++中的const）是反义词。</p><p>1、const所修饰的函数中，要有编译器负责保护类中的成员函数不被修改；而相对地，mutable则是用来修饰类的成员变量的，让该变量在const修饰的常成员函数中可以被修改</p><p>2、const修饰的函数只能是类的成员函数(保护this指针不被恶意修改)；mutable修饰的变量只能是类的成员变量。</p><p>3、在C++中，mutable也是为了突破const的限制而设置的。被mutable修饰的变量，将永远处于可变的状态，即使在一个const修饰的常成员函数中。</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p> private可以保护不被类的成员不被外界调用，析构函数通常情况是public的，这样外部调用的时候可以用于<br> 释放内存，如果一个析构函数被private修饰，那么会出现编译报错，因为编译器不能调用被private保护的析构函数。  </p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>[1] <a href="https://blog.csdn.net/weixin_42067873/article/details/96107750">https://blog.csdn.net/weixin_42067873/article/details/96107750</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Q&amp;A</title>
      <link href="/2022/11/09/interview/"/>
      <url>/2022/11/09/interview/</url>
      
        <content type="html"><![CDATA[<h1 id="Interview-问题收集"><a href="#Interview-问题收集" class="headerlink" title="Interview 问题收集"></a>Interview 问题收集</h1><h6 id="memcopy-与-memmove谁更安全？"><a href="#memcopy-与-memmove谁更安全？" class="headerlink" title="memcopy 与 memmove谁更安全？"></a>memcopy 与 memmove谁更安全？</h6><p>memmove 更安全，memove 可以正确处理地址重叠的部分。</p><h6 id="const-与-define-在定义常量的区别？"><a href="#const-与-define-在定义常量的区别？" class="headerlink" title="const 与 define 在定义常量的区别？"></a>const 与 define 在定义常量的区别？</h6><p>const 申明的常量会进行类型检查，define只是替换，不做类型检查。</p><h6 id="static-关键字的作用？"><a href="#static-关键字的作用？" class="headerlink" title="static 关键字的作用？"></a>static 关键字的作用？</h6><p>static申明的类变量属于类，不属于某个对象，是所有类共享。</p><h6 id="Cache和主存内存一致性"><a href="#Cache和主存内存一致性" class="headerlink" title="Cache和主存内存一致性"></a>Cache和主存内存一致性</h6><ol><li>write-through 写操作是数据写入cache又写入内存。</li><li>write-back 写操作只是在数据被踢出cache时才写入内存。</li></ol><h6 id="指令调度的基本流程"><a href="#指令调度的基本流程" class="headerlink" title="指令调度的基本流程"></a>指令调度的基本流程</h6><ol><li>构建DAG图，对DAG图进行处理</li><li>初始化，包括调度策略，DAG图，调度器队列；</li><li>选取节点进行调度，pickNode方法在自定义调度策略中被重写，GenericScheduler::pickNode（）获取RegionPolicy中设置的次序&gt;进行遍历，pickNode方法返回一个SUnit（Scheduling unit），这是调度图中的一个节点表示，包含节点的一系列属性和状态，譬如isPending，isAvailable，isScheduled等用于记录节点状态的信息；调试时可以通过SUnit.getInstr()-&gt;dump()打印出节点中指令的信息。</li><li>scheduleMI，移动指令和更新寄存器压力信息</li><li>更新调度状态，将SU-&gt;isScheduled 设为 true。</li></ol><h6 id="std-cout-与-std-cerr-的区别"><a href="#std-cout-与-std-cerr-的区别" class="headerlink" title="std::cout 与 std::cerr 的区别?"></a>std::cout 与 std::cerr 的区别?</h6><p>​std::cerr不需要被发送缓冲区，可以直接显示输出，std::cout 为了减少刷屏的次数，设置了缓冲区，这样在遇到std::endl 或者”\n”&gt;时会调用os.flush把缓冲区内容输出到显示器上进行显示。</p>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> c/c++ </tag>
            
            <tag> LLVM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
